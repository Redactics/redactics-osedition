{"version":3,"sources":["../node_modules/@material-ui/core/esm/MenuItem/MenuItem.js","../node_modules/@material-ui/icons/esm/Edit.js","pages/inputs/Main.tsx"],"names":["MenuItem","React","props","ref","tabIndex","classes","className","_props$component","component","_props$disableGutters","disableGutters","ListItemClasses","_props$role","role","selected","tabIndexProp","other","_objectWithoutProperties","disabled","undefined","ListItem","_extends","button","dense","clsx","root","gutters","withStyles","theme","typography","body1","_defineProperty","minHeight","paddingTop","paddingBottom","boxSizing","width","overflow","whiteSpace","breakpoints","up","body2","name","createSvgIcon","createElement","d","Card","styled","MuiCard","spacing","Divider","MuiDivider","Button","MuiButton","TextFieldSpacing","MuiTextField","FormControlSpacing","MuiFormControl","FormControl","TextField","NWTableCell","display","MuiExpansionPanelDetails","TableCell","Alert","MuiAlert","Inputs","refreshInputs","bind","handleInputChanges","inputDialog","hideInputDialog","saveInputChanges","deleteInput","saveChanges","handleSnackbarClose","state","inputs","errors","input","uuid","inputDisplayMode","inputType","inputName","exportData","diskSize","enableSSL","sslMode","editInputDialog","missingInput","newInputKey","saveButtonDisabled","showSnackbar","a","this","fetch","context","apiUrl","credentials","response","json","data","setState","console","log","event","target","checked","value","mt","JSX","fullWidth","error","label","onChange","InputProps","endAdornment","selectAdornment","position","title","placement","htmlFor","key","control","color","variant","type","inputProps","min","errorsFound","push","duplicateInputName","map","mb","severity","match","filter","i","payload","method","headers","body","JSON","stringify","Fragment","gutterBottom","my","justify","container","item","size","onClick","xs","open","onClose","maxWidth","aria-labelledby","aria-describedby","id","editInputDialogContent","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","message","action","aria-label","Component","contextType","RedacticsContext","marginRight"],"mappings":"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","file":"static/js/11.a3c8e114.chunk.js","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport ListItem from '../ListItem';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: _extends({}, theme.typography.body1, _defineProperty({\n      minHeight: 48,\n      paddingTop: 6,\n      paddingBottom: 6,\n      boxSizing: 'border-box',\n      width: 'auto',\n      overflow: 'hidden',\n      whiteSpace: 'nowrap'\n    }, theme.breakpoints.up('sm'), {\n      minHeight: 'auto'\n    })),\n    // TODO v5: remove\n\n    /* Styles applied to the root element if `disableGutters={false}`. */\n    gutters: {},\n\n    /* Styles applied to the root element if `selected={true}`. */\n    selected: {},\n\n    /* Styles applied to the root element if dense. */\n    dense: _extends({}, theme.typography.body2, {\n      minHeight: 'auto'\n    })\n  };\n};\nvar MenuItem = React.forwardRef(function MenuItem(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'li' : _props$component,\n      _props$disableGutters = props.disableGutters,\n      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,\n      ListItemClasses = props.ListItemClasses,\n      _props$role = props.role,\n      role = _props$role === void 0 ? 'menuitem' : _props$role,\n      selected = props.selected,\n      tabIndexProp = props.tabIndex,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\", \"disableGutters\", \"ListItemClasses\", \"role\", \"selected\", \"tabIndex\"]);\n\n  var tabIndex;\n\n  if (!props.disabled) {\n    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;\n  }\n\n  return /*#__PURE__*/React.createElement(ListItem, _extends({\n    button: true,\n    role: role,\n    tabIndex: tabIndex,\n    component: component,\n    selected: selected,\n    disableGutters: disableGutters,\n    classes: _extends({\n      dense: classes.dense\n    }, ListItemClasses),\n    className: clsx(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? MenuItem.propTypes = {\n  /**\n   * Menu item contents.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a DOM element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.\n   */\n  dense: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the left and right padding is removed.\n   */\n  disableGutters: PropTypes.bool,\n\n  /**\n   * `classes` prop applied to the [`ListItem`](/api/list-item/) element.\n   */\n  ListItemClasses: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  role: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  tabIndex: PropTypes.number\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiMenuItem'\n})(MenuItem);","import React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon(React.createElement(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.9959.9959 0 00-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"\n}), 'Edit');","import React from 'react';\nimport styled, { withTheme } from 'styled-components';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Helmet from 'react-helmet';\n\n// import { red, green, blue } from \"@material-ui/core/colors\";\n\nimport {\n  Divider as MuiDivider,\n  Typography,\n  Button as MuiButton,\n  Box,\n  CardContent,\n  Card as MuiCard,\n  Link,\n  Grid,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  FormControlLabel,\n  Checkbox,\n  Paper,\n  TextField as MuiTextField,\n  InputAdornment,\n  Tooltip,\n  FormControl as MuiFormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails as MuiExpansionPanelDetails,\n  Snackbar,\n  IconButton,\n} from '@material-ui/core';\n\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  DeleteOutline as DeleteIcon,\n  HelpOutline as HelpIcon,\n  ExpandMore as ExpandMoreIcon,\n  Close as CloseIcon,\n} from '@material-ui/icons';\n\nimport {\n  Save as SaveIcon,\n} from 'react-feather';\n\nimport {\n  InputRecord,\n} from '../../types/redactics';\n\nimport { Alert as MuiAlert } from '@material-ui/lab';\n\nimport { spacing } from '@material-ui/system';\nimport RedacticsContext from '../../contexts/RedacticsContext';\n\nconst Card = styled(MuiCard)(spacing);\n\nconst Divider = styled(MuiDivider)(spacing);\n\nconst Button = styled(MuiButton)(spacing);\n\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\n\nconst FormControlSpacing = styled(MuiFormControl)(spacing);\n\nconst FormControl = styled(FormControlSpacing)`\n  min-width: 200px;\n  max-width: 200px;\n`;\n\nconst TextField = styled(TextFieldSpacing)`\n  width: 200px;\n`;\n\nconst ExpansionPanelDetails = withStyles({\n  root: {\n    display: 'block',\n  },\n})(MuiExpansionPanelDetails);\n\nconst NWTableCell = withStyles({\n  root: {\n    whiteSpace: 'nowrap',\n  },\n})(TableCell);\n\nconst Alert = styled(MuiAlert)(spacing);\n\nconst styles = {\n  selectAdornment: {\n    marginRight: '-30px',\n  },\n};\n\ninterface IProps {\n  classes: any;\n}\n\ninterface IState {\n  inputs: InputRecord[];\n  errors: any;\n  input: InputRecord;\n  editInputDialog: boolean;\n  missingInput: boolean;\n  newInputKey: number;\n  saveButtonDisabled: boolean;\n  showSnackbar: boolean;\n}\n\nclass Inputs extends React.Component<IProps, IState> {\n  static contextType = RedacticsContext;\n\n  constructor(props:IProps) {\n    super(props);\n\n    this.refreshInputs = this.refreshInputs.bind(this);\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n    this.inputDialog = this.inputDialog.bind(this);\n    this.hideInputDialog = this.hideInputDialog.bind(this);\n    this.saveInputChanges = this.saveInputChanges.bind(this);\n    this.deleteInput = this.deleteInput.bind(this);\n    this.saveChanges = this.saveChanges.bind(this);\n    this.handleSnackbarClose = this.handleSnackbarClose.bind(this);\n\n    this.state = {\n      inputs: [],\n      errors: {},\n      input: {\n        uuid: \"\",\n        inputDisplayMode: \"\",\n        inputType: \"\",\n        inputName: \"\",\n        exportData: true,\n        diskSize: 0,\n        enableSSL: false,\n        sslMode: \"prefer\",\n      },\n      editInputDialog: false,\n      missingInput: false,\n      newInputKey: 0,\n      saveButtonDisabled: true,\n      showSnackbar: false,\n    };\n  }\n\n  async componentDidMount() {\n    this.refreshInputs();\n  }\n\n  async refreshInputs() {\n    try {\n      const response = await fetch(`${this.context.apiUrl}/input`, {\n        credentials: 'include',\n      });\n\n      const data = await response.json();\n\n      this.setState({\n        inputs: data.inputs,\n      })\n    } catch (err) {\n      console.log('CATCH ERR', err);\n    }\n  }\n\n  handleInputChanges(event:any) {\n    const state:any = this.state;\n    state.input[event.target.name] = (event.target.name === \"enableSSL\" || event.target.name === \"exportData\") ? event.target.checked : event.target.value;\n    this.setState(state);\n  }\n\n  inputDialog(input?:InputRecord) {\n    if (input) {\n      this.setState({\n        input: {\n          uuid: input.uuid,\n          inputDisplayMode: \"Edit\",\n          inputType: input.inputType,\n          inputName: input.inputName,\n          exportData: input.exportData,\n          diskSize: input.diskSize,\n          enableSSL: input.enableSSL,\n          sslMode: input.sslMode,\n        },\n        editInputDialog: true,\n      })\n    }\n    else {\n      this.setState({\n        input: {\n          uuid: \"new\",\n          inputDisplayMode: \"Add\",\n          inputType: \"\",\n          inputName: \"\",\n          exportData: true,\n          diskSize: 20,\n          enableSSL: false,\n          sslMode: \"prefer\",\n        },\n        editInputDialog:true,\n      })\n    }\n  }\n\n  hideInputDialog() {\n    this.setState({\n      editInputDialog:false\n    })\n  }\n\n  handleSnackbarClose() {\n    this.setState({\n      showSnackbar: false,\n    });\n  };\n\n  editInputDialogContent() { \n    return (\n      <Box>\n        <Box mt={4}>\n          {this.state.errors.JSX}\n\n          <Box mt={4}>\n            <FormControl fullWidth>\n              <TextField\n                error={this.state.errors.inputName}\n                name=\"inputName\"\n                label=\"Input Name\"\n                value={this.state.input.inputName}\n                onChange={(event) => this.handleInputChanges(event)}\n                InputProps={{ endAdornment: <InputAdornment className={this.props.classes.selectAdornment} position=\"end\"><Tooltip title=\"Arbitrary label for this input\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n              />\n            </FormControl>\n\n            <Box mt={4}>\n              <FormControl fullWidth>\n                <InputLabel htmlFor=\"inputType\">Input/Database Type</InputLabel>\n                <Select\n                  error={this.state.errors.inputType}\n                  name=\"inputType\"\n                  value={this.state.input.inputType}\n                  onChange={(event) => this.handleInputChanges(event)}\n                >\n                  <MenuItem key=\"postgresql\" value=\"postgresql\">PostgreSQL</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n\n            <Box mt={4}>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={this.state.input.exportData}\n                    onChange={(event) => this.handleInputChanges(event)}\n                    name=\"exportData\"\n                    color=\"primary\"\n                  />\n                }\n                label=\"Export data from this input source\"\n              />&nbsp;<Tooltip title=\"Checking this option means that you intend to export data from this input source, in which case temporary disk space will be required for this export (CSV) data\" placement=\"right-start\"><HelpIcon /></Tooltip>\n            </Box>\n\n            <Box mt={4} display={(this.state.input.exportData) ? 'block' : 'none'}>\n              <FormControl fullWidth variant=\"outlined\">\n                <TextField\n                  error={this.state.errors.diskSize}\n                  name=\"diskSize\"\n                  label=\"Disk Space Allocation\"\n                  onChange={(event) => this.handleInputChanges(event)}\n                  value={this.state.input.diskSize}\n                  type=\"number\"\n                  InputProps={{\n                    endAdornment: <InputAdornment className={this.props.classes.selectAdornment} position=\"end\"><b>GB</b>&nbsp;&nbsp;<Tooltip title=\"Specify an adequate amount of disk space to allocate for this export (CSV) data. A persistent volume claim will be provisioned matching this file size. You can enlarge, but not shrink this disk space in the future.\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment>,\n                    inputProps: {\n                      min:1\n                    }\n                  }}\n                />\n              </FormControl>\n            </Box>\n\n            <Box mt={4}>\n              <FormControlLabel\n                control={\n                  <Checkbox\n                    checked={this.state.input.enableSSL}\n                    onChange={(event) => this.handleInputChanges(event)}\n                    name=\"enableSSL\"\n                    color=\"primary\"\n                  />\n                }\n                label=\"Database Connectivity Should Be TLS/SSL Encrypted\"\n              />\n            </Box>\n\n            <Box mt={4} display={(this.state.input.enableSSL) ? 'block' : 'none'}>\n              Be sure to follow the \"TLS/SSL Certificate Setup Instructions\" included in the Agents page to facilitate connectivity using your certificates.\n              <Box mt={4}>\n                <FormControl fullWidth>\n                  <InputLabel htmlFor=\"sslMode\">TLS/SSL Mode</InputLabel>\n                  <Select\n                    name=\"sslMode\"\n                    value={this.state.input.sslMode}\n                    onChange={(event) => this.handleInputChanges(event)}\n                  >\n                    <MenuItem key=\"allow\" value=\"allow\">Allow</MenuItem>\n                    <MenuItem key=\"prefer\" value=\"prefer\">Prefer</MenuItem>\n                    <MenuItem key=\"require\" value=\"require\">Require</MenuItem>\n                    <MenuItem key=\"verify-ca\" value=\"verify-ca\">Verify CA</MenuItem>\n                    <MenuItem key=\"verify-full\" value=\"verify-full\">Verify Full</MenuItem>\n                  </Select>\n                </FormControl>\n              </Box>\n            </Box>\n\n            {/* <Box mt={4} display={(!this.state.input.uuid.match(/^new/) && this.state.input.enableSSL) ? 'block' : 'none'}>\n              <Paper variant=\"outlined\">\n                <ExpansionPanel>\n                  <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    <Typography>TLS/SSL Encryption Setup Instructions</Typography>\n                  </ExpansionPanelSummary>\n                  <ExpansionPanelDetails>\n                    Enabling TLS/SSL encryption requires having an engineer perform the following four steps. These steps (even upon completion) will remain available here for reference:\n\n                    <ol>\n                      <li>Figure out what <code>sslmode</code> option is required by your database host/provider. Possibilities include <code>allow, prefer, require, verify-ca, verify-full</code> (<Link href=\"https://www.postgresql.org/docs/12/libpq-ssl.html\" target=\"_blank\">more info</Link>). Also figure out whether your database requires presenting only the root CA certificate, or the root CA as well as client cert and key files. Download these required files - we&apos;ll need them for step 3.</li>\n                      <li>Update your Helm configuration file (i.e. <code>{this.getAgent().configPath}</code>) and add the following in the block (respecting proper indentation level) that includes <code>id: {this.props.input.uuid}</code>. Take out the <code>sslcert</code> and <code>sslkey</code> params if your server doesn&apos;t require these, and you can adjust the <code>sslmode</code> value as necessary:<br/><br/>\n                        <code>\n                          enableSSL: true<br/>\n                          extra: &apos;&#123;&quot;sslmode&quot;:&quot;verify-ca&quot;, &quot;sslrootcert&quot;:&quot;/pgcerts/{this.props.input.uuid}/sslrootcert&quot;, &quot;sslcert&quot;: &quot;/pgcerts/{this.props.input.uuid}/sslcert&quot;, &quot;sslkey&quot;: &quot;/pgcerts/{this.props.input.uuid}/sslkey&quot;&#125;&apos;\n                        </code><br/><br/>\n                        If, for whatever reason, you&apos;d like to disable this TLS/SSL connectivity you can simply comment out these two lines by entering a hash (i.e. <code>#</code>) character before each line.\n                      </li>\n                      <li>Create a Kubernetes secret containing the certificates required by your database. Adjust the file paths, and take out the <code>sslcert</code> and <code>sslkey</code> params if your server doesn&apos;t require these:<br/><br/>\n                        <code>\n                          kubectl create secret -n {this.getAgent().namespace} generic pgcert-{this.props.input.uuid} --from-file=sslrootcert=/path/to/server-ca.pem --from-file=sslcert=/path/to/client-cert.pem  --from-file=sslkey=/path/to/client-key.pem\n                        </code>\n                      </li>\n                      <li>Visit the Agent page and reapply the provided configuration to your cluster, which will update all agent database connections to use the updated configuration you&apos;ve provided in your Helm configuration file.</li>\n                    </ol>\n                  </ExpansionPanelDetails>\n                </ExpansionPanel>\n              </Paper>\n            </Box> */}\n          </Box>\n        </Box>\n      </Box>\n    ) \n  }\n\n  saveInputChanges() {\n    const state:IState = this.state;\n    let errorsFound:boolean = false;\n    let inputs:InputRecord[] = this.state.inputs;\n\n    if (!state.input.inputName) {\n      state.errors.inputName = true;\n      errorsFound = true;\n    }\n    else {\n      state.errors.inputName = false;\n    }\n\n    if (!state.input.inputType) {\n      state.errors.inputType = true;\n      errorsFound = true;\n    }\n    else {\n      state.errors.inputType = false;\n    }\n\n    if (errorsFound) {\n      this.setState({\n        errors: state.errors\n      })\n      return;\n    }\n\n    if (this.state.input.uuid === \"new\") {\n      state.newInputKey++;\n      state.input.uuid = \"new\" + state.newInputKey;\n\n      inputs.push(state.input);\n    }\n\n    // find and update existing input in inputs listing\n    let duplicateInputName:boolean = false;\n    inputs = inputs.map((input) => {\n      if (input.inputName === state.input.inputName && input.uuid !== state.input.uuid) {\n        duplicateInputName = true;\n      }\n      else if (input.uuid === state.input.uuid) {\n        input.inputName = state.input.inputName;\n        input.inputType = state.input.inputType;\n        input.diskSize = state.input.diskSize;\n        input.enableSSL = state.input.enableSSL;\n        input.sslMode = state.input.sslMode;\n      }\n\n      return input;\n    });\n\n    if (duplicateInputName) {\n      state.errors.JSX = (\n        <Alert mb={4} severity=\"error\">Input names must be unique.</Alert>\n      );\n\n      this.setState({\n        errors: state.errors\n      })\n      return;\n    }\n\n    state.errors.JSX = null;\n    //console.log(\"INPUTS\", inputs);\n    //console.log(\"STATE\", state)\n\n    if (this.state.input.uuid.match(/^new/)) {\n      this.setState({\n        missingInput: false,\n        errors: state.errors,\n        editInputDialog: false,\n        newInputKey: state.newInputKey,\n        inputs: inputs,\n        saveButtonDisabled: false,\n      })\n    }\n    else {\n      this.setState({\n        missingInput: false,\n        errors: state.errors,\n        editInputDialog: false,\n        inputs: inputs,\n        saveButtonDisabled: false,\n      })\n    }\n  }\n\n  deleteInput(input:InputRecord) {\n    const state:IState = this.state;\n\n    const inputs = state.inputs.filter((i:InputRecord) => {\n      return (i.uuid !== input.uuid)\n    })\n\n    this.setState({\n      inputs: inputs,\n      saveButtonDisabled: false,\n    });\n  }\n\n  async saveChanges() {\n    try {\n      this.setState({\n        saveButtonDisabled: true,\n        errors: {},\n      });\n\n      const payload = {\n        inputs: this.state.inputs,\n      }\n\n      await fetch(`${this.context.apiUrl}/input`, {\n        method: 'put',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify(payload),\n      });\n\n      this.setState({\n        saveButtonDisabled: false,\n        showSnackbar: true,\n      });\n\n      this.refreshInputs();\n\n    } catch (err) {\n      console.log('CATCH ERR', err);\n\n      this.setState({\n        saveButtonDisabled: false\n      });\n    }\n  }\n\n  /* eslint-disable max-len */\n\n  render() {\n    return (\n      <React.Fragment>\n        <Helmet title=\"Input Sources\" />\n\n        <Typography variant=\"h1\" gutterBottom display=\"inline\">\n          Input Sources\n        </Typography>\n\n        <Divider my={6} />\n\n        <Box mt={4}>\n          <Typography variant=\"body1\" gutterBottom>\n            Define your input sources (i.e. databases, API inputs, etc.) here.\n          </Typography>\n\n          <Box mt={8}>\n            <Grid\n              justify=\"space-between\"\n              container\n              spacing={10}\n            >\n              <Grid item></Grid>\n              <Grid item>\n                <div>\n                  <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => this.inputDialog()}>\n                    <AddIcon />&nbsp;\n                    Add Input Source\n                  </Button>\n                </div>\n              </Grid>\n            </Grid>\n          </Box>\n\n          <Card mt={8}>\n            <CardContent>\n              <Table>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>ID</TableCell>\n                    <TableCell>Name</TableCell>\n                    <TableCell>Input Type</TableCell>\n                    <TableCell>Disk Space Allocation</TableCell>\n                    <TableCell>TLS/SSL Encrypted</TableCell>\n                    <TableCell></TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {this.state.inputs.map((input:InputRecord) => {\n                    return (\n                      <TableRow key={input.uuid}>\n                        <TableCell>{(input.uuid.match(/^new/)) ? \"\" : input.uuid}</TableCell>\n                        <TableCell>{input.inputName}</TableCell>\n                        <TableCell>{input.inputType}</TableCell>\n                        <TableCell>{(input.diskSize) ? input.diskSize + \" GB\" : \"None\"}</TableCell>\n                        <TableCell>{(input.enableSSL) ? \"yes\" : \"no\"}</TableCell>\n                        <NWTableCell>\n                          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => this.inputDialog(input)}>\n                            <EditIcon/>&nbsp;Edit\n                          </Button>&nbsp;\n                          <Button variant=\"contained\" color=\"default\" size=\"small\" onClick={() => this.deleteInput(input)}>\n                            <DeleteIcon />&nbsp;Delete\n                          </Button>\n                        </NWTableCell>\n                      </TableRow>\n                    )\n                  })}\n                </TableBody>\n              </Table>\n\n              <Box mt={8}>\n                <Grid\n                  container\n                  justify=\"space-between\"\n                >\n                  <Grid item xs={10}>\n                    <Button variant=\"contained\" color=\"primary\" size=\"large\" disabled={this.state.saveButtonDisabled} onClick={() => this.saveChanges()}>\n                      <SaveIcon />&nbsp;\n                      Save Changes\n                    </Button>\n                  </Grid>\n                </Grid>\n              </Box>\n            </CardContent>\n          </Card>\n        </Box>\n\n        <Dialog\n          open={this.state.editInputDialog}\n          onClose={this.hideInputDialog}\n          maxWidth=\"md\"\n          aria-labelledby=\"dialog-title\"\n          aria-describedby=\"dialog-description\"\n          fullWidth\n        >\n          <DialogTitle id=\"dialog-title\">{this.state.input.inputDisplayMode} Input Source</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"dialog-description\">\n              {this.editInputDialogContent()}\n            </DialogContentText>\n\n            <DialogActions>\n              <Button color=\"secondary\" variant=\"contained\" onClick={this.saveInputChanges}>\n                {this.state.input.inputDisplayMode} Input\n              </Button>\n            </DialogActions>\n          </DialogContent>\n        </Dialog>\n\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'right',\n          }}\n          open={this.state.showSnackbar}\n          autoHideDuration={8000}\n          onClose={this.handleSnackbarClose}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\"><b>Your changes have been saved!</b></span>}\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"inherit\"\n              onClick={this.handleSnackbarClose}\n            >\n              <CloseIcon />\n            </IconButton>,\n          ]}\n        />\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(Inputs);\n"],"sourceRoot":""}