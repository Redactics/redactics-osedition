{"version":3,"sources":["pages/workflows/WorkflowRedactionRules.tsx","pages/workflows/WorkflowInputs.tsx","pages/workflows/WorkflowSchedule.tsx","pages/workflows/WorkflowExport.tsx","pages/workflows/WorkflowPostExport.tsx","pages/workflows/DatabaseMigrationSetup.tsx","pages/workflows/Workflow.tsx","pages/workflows/Main.tsx"],"names":["Grid","styled","MuiGrid","spacing","TextFieldSpacing","MuiTextField","FormControlSpacing","MuiFormControl","FormControl","TextField","Select","MuiSelect","Button","MuiButton","WorkflowPostExport","props","state","ruleLabelWidth","this","numMaskingRules","Box","mt","justify","container","item","mb","variant","color","size","onClick","addMaskingRule","Add","Table","style","width","TableBody","maskingRuleValues","map","row","TableRow","key","TableCell","paddingLeft","margin","InputLabel","value","databaseTable","onChange","event","handleRuleChange","name","input","OutlinedInput","labelWidth","allDatabaseTables","dt","MenuItem","defaultValue","schema","label","table","column","rule","maskingRules","val","deleteMaskingRule","Fragment","Typography","gutterBottom","xs","displayMaskingRules","React","Component","WideFormControl","NWTableCell","withStyles","root","whiteSpace","WorkflowInputs","agent","agents","filter","a","uuid","workflow","agentId","length","configPath","namespace","tableSelection","addButton","tables","idx","split","handleAddTable","deleteTableSelection","addTableSelection","errors","JSX","display","workflowType","fullWidth","handleInputChanges","displayTableSelection","foundConstraints","workflowInput","agentInputs","forEach","inputs","find","i","join","TableHead","triggerEditInputDialog","Edit","enabled","selectedInput","selectInputSource","inputName","outputMockConstraints","inputEnabled","Checkbox","checked","Link","href","title","Dialog","open","editInputDialog","onClose","hideInputDialog","maxWidth","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","editInputDialogContent","DialogActions","saveInputChanges","outputDataSources","selectAdornment","marginRight","DatabaseSchedule","RadioGroup","aria-label","handleExportSchedule","String","exportSchedule","FormControlLabel","control","Radio","htmlFor","handleSchedule","scheduleSelection","customSchedule","error","schedule","InputProps","endAdornment","InputAdornment","position","Tooltip","placement","target","rel","WorkflowExport","displayConstraintOptions","bind","currentDatabaseTable","tableOutputOptions","disableDeltaUpdates","constraintSchema","handleTableOutputChanges","constraintTable","sampleFields","numDays","toLowerCase","includes","createdAtField","updatedAtField","options","exportTableDataConfig","config","triggerOutputOptions","o","tableName","deltaUpdatesDisabled","genConstraintSummary","deleteConstraint","showOutputOptions","hideOutputOptions","displayConstraintsTable","MedTextField","WideTextField","bold","fontWeight","Alert","MuiAlert","ExpansionPanelDetails","MuiExpansionPanelDetails","Paper","MuiPaper","engine","displayEngine","df","dataFeed","dataFeedSummary","uploadBucket","dataFeedConfig","S3UploadBucket","match","databaseEngine","enableDeltaUpdates","enablePostUpdatePreparedStatements","preparedStatementValues","postUpdateKeyValues","kv","push","image","tag","dataFeeds","addDataFeed","dataFeedName","triggerEditDataFeed","deleteDataFeed","duplicateDataFeed","severity","invalidBucketName","invalidPostUpdateKeyValues","invalidSecret","namespaceTip","feedSecrets","editDataFeed","hideDataFeed","showErrors","List","component","ListItem","disabled","button","handleDataFeed","ListItemText","primary","primaryTypographyProps","secondary","inputSource","handleDataFeedOptions","allOutputs","invalidDeltaUpdateField","deltaUpdateField","ExpansionPanel","ExpansionPanelSummary","expandIcon","ExpandMore","getAgent","updateParameterValue","deleteParameterValue","addParameterValue","startAdornment","agentNamespace","placeholder","shell","multiline","rowsMax","command","args","addSecret","secret","secretType","secretName","handleCustomSecret","secretKey","secretPath","handleDeleteSecret","envName","handleDataFeedBack","saveDataFeedChanges","handleDataFeedCancel","outputTable","DatabaseMigrationSetup","helmHook","migrationNamespace","migrationHelmHookWeight","script","handleWFChanges","className","classes","migrationDatabase","migrationDatabaseClone","migrationConfiguration","type","text","onCopy","clipboardCopy","wordBreak","Card","MuiCard","Workflow","handleSnackbarClose","setState","showSnackbar","showSnackbarEdit","showClipboardSnackbar","handleEditWorkflowSnackbarClose","saveChanges","hideHelmReminder","toggleHelmReminder","showLastReportedError","hideLastReportedError","hideErrorDialog","handleDeltaUpdate","validateRedactionRules","deleteWorkflowConfirmation","cancelWorkflowConfirmation","getExportFileNames","triggerAddTable","deleteDatabaseTable","deleteWorkflow","transformExpansion","resetDataFeedErrors","redactrules","t","presetUuid","thisAgentSearch","newRuleKey","transformExpanded","outputExpanded","saveButtonDisabled","showHelmReminder","helmReminderCheckbox","completeRedactRules","dupeRedactRuleFound","dupeTableExportFound","missingSchemaSelection","missingSecretField","invalidOutputSettingField","missingPostExportHookField","validSchedule","validName","validDiskSize","addTable","displayExportTableSchema","displayExportTableData","S3UploadFileChecked","diskSize","numInputs","datafeeds","showDialog","newInputKey","newDataFeedKey","addAllS3Uploads","exportTableSchemaAll","exportTableDataAll","ackHelmReminder","orphanedWorkflow","invalidDeltaUpdate","invalidPreparedStatement","mockMigrationDatabase","invalidDigitalTwinOutput","invalidForgetUserFields","invalidMigrationFields","digitalTwinAdded","snackbarText","Object","keys","redactrulesets","redactKey","redactName","presets","preset","isDefault","presetName","context","copied","copiedText","values","mr","workflowId","c","exportTableDataConfigObj","payload","validateMigrationMockFields","fetch","apiUrl","method","headers","body","JSON","stringify","response","json","data","invalidSchedule","Array","isArray","e","msg","param","r","redactRuleUuids","updateHelmConfig","missingInput","rules","validFields","missingFields","legalName","validRules","localStorage","getItem","lastStackTrace","index","preventDefault","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","message","action","IconButton","Close","filenames","inputCopy","agentInput","field","tableArr","bucket","errorsFound","legalBucketName","s","expanded","scheme","findConfig","d","replace","dataFeedCopy","enableSSL","isNaN","parseFloat","wf","CardContent","dbUUIDSnackbar","ml","alignItems","displayWorkflowType","displayLastReportedError","WorkflowRedactionRules","WorkflowSchedule","outputExpansion","autoFocus","lastTask","contextType","RedacticsContext","Divider","MuiDivider","Workflows","ruleLegendDialog","newWorkflowDialog","workflows","newWorkflowName","newWorkflowAgent","newWorkflowType","dbLimitError","handleChangeAdd","addWorkflow","ruleLegendOpen","ruleLegendClose","newWorkflowOpen","newWorkflowClose","refreshWorkflows","dbLimitErrorClose","my","FormatListBulleted","noValidate","autoComplete"],"mappings":"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","file":"static/js/12.e4406cfa.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { spacing } from '@material-ui/system';\n\nimport {\n  Grid as MuiGrid,\n  Typography,\n  TextField as MuiTextField,\n  Select as MuiSelect,\n  FormControl as MuiFormControl,\n  Button as MuiButton,\n  InputLabel,\n  OutlinedInput,\n  MenuItem,\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableRow,\n} from '@material-ui/core';\n\nimport {\n  DeleteOutline as DeleteIcon,\n  Add as AddIcon,\n} from '@material-ui/icons';\n\nimport { RedactRule, WorkflowRecord } from '../../types/redactics';\n\nconst Grid = styled(MuiGrid)(spacing);\n\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\n\nconst FormControlSpacing = styled(MuiFormControl)(spacing);\n\nconst FormControl = styled(FormControlSpacing)`\n  min-width: 100px;\n  max-width: 100px;\n`;\n\nconst TextField = styled(TextFieldSpacing)`\n  width: 100px;\n`;\n\nconst Select = styled(MuiSelect)(spacing);\n\nconst Button = styled(MuiButton)(spacing);\n\ninterface IProps {\n  workflow: WorkflowRecord;\n  maskingRuleValues: RedactRule[];\n  handleRuleChange: any;\n  deleteMaskingRule: any;\n  numMaskingRules: number;\n  maskingRules: RedactRule[];\n  addMaskingRule: any;\n  allDatabaseTables: string[];\n}\n\ninterface IState {\n  ruleLabelWidth: number;\n}\n\nclass WorkflowPostExport extends React.Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      ruleLabelWidth: 30,\n    };\n  }\n\n  displayMaskingRules() {\n    if (!this.props.numMaskingRules) {\n      return (\n        <Box>\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.props.addMaskingRule}>\n            <AddIcon />&nbsp;&nbsp;Add Table Field Containing PII\n          </Button>\n        </Box>\n      )\n    }\n    else {\n      return (\n        <Box mt={8}>\n          <Grid\n            justify=\"space-between\"\n            container\n            spacing={10}\n          >\n            <Grid item></Grid>\n            <Grid item mb={6}>\n              <div>\n                <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.props.addMaskingRule}>\n                  <AddIcon />&nbsp;\n                  Add Rule\n                </Button>\n              </div>\n            </Grid>\n          </Grid>\n\n          <Table size=\"small\" style={{ width: 'auto' }}>\n            <TableBody>\n              {this.props.maskingRuleValues.map((row:RedactRule) => (\n                <TableRow key={row.key}>\n                  <TableCell style={{ paddingLeft: 0 }}>\n                    <FormControl variant=\"outlined\" margin=\"dense\">\n                      <InputLabel>\n                        Input\n                      </InputLabel>\n                      <Select\n                        value={row.databaseTable}\n                        onChange={(event) => this.props.handleRuleChange(row.key, event)}\n                        name=\"databaseTable\"\n                        input={\n                          <OutlinedInput\n                            labelWidth={this.state.ruleLabelWidth}\n                            name=\"rule\"\n                          />\n                        }\n                      >\n                        {this.props.allDatabaseTables.map((dt:string) => (\n                          <MenuItem key={dt} value={dt}>{dt}</MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </TableCell>\n                  <TableCell>\n                    <TextField name=\"schema\" defaultValue={row.schema} label=\"Schema\" variant=\"outlined\" onChange={(event) => this.props.handleRuleChange(row.key, event)} margin=\"dense\" />\n                  </TableCell>\n                  <TableCell>\n                    <TextField name=\"table\" defaultValue={row.table} label=\"Table\" variant=\"outlined\" onChange={(event) => this.props.handleRuleChange(row.key, event)} margin=\"dense\" />\n                  </TableCell>\n                  <TableCell>\n                    <TextField name=\"column\" defaultValue={row.column} label=\"Column\" variant=\"outlined\" onChange={(event) => this.props.handleRuleChange(row.key, event)} margin=\"dense\" />\n                  </TableCell>\n                  <TableCell>\n                    <FormControl variant=\"outlined\" margin=\"dense\">\n                      <InputLabel>\n                        Rule\n                      </InputLabel>\n                      <Select\n                        value={row.rule}\n                        onChange={(event) => this.props.handleRuleChange(row.key, event)}\n                        name=\"rule\"\n                        input={\n                          <OutlinedInput\n                            labelWidth={this.state.ruleLabelWidth}\n                            name=\"rule\"\n                          />\n                        }\n                      >\n                        {this.props.maskingRules.map((rule:RedactRule) => (\n                          <MenuItem key={rule.key} value={rule.key}>{rule.val}</MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </TableCell>\n                  <TableCell>\n                    <Box>\n                      <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => this.props.deleteMaskingRule(row.key)}>\n                        <DeleteIcon />&nbsp;&nbsp;Delete\n                      </Button>\n                    </Box>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      )\n    }\n  }\n\n  /* eslint-disable max-len */\n\n  render() {\n    return (\n      <React.Fragment>\n        <Box mt={8}>\n          <Typography variant=\"h6\" gutterBottom>\n            Database Fields Containing PII/Confidential Info\n          </Typography>\n\n          <Box mb={4}>\n            <Grid container>\n              <Grid item xs={8}>\n                <Typography variant=\"body1\" gutterBottom>\n                  You can use the Redactics PII Scanner to auto-detect your database fields containing PII, or else define your fields containing PII (and their redaction rules) here.\n                </Typography>\n              </Grid>\n            </Grid>\n          </Box>\n\n          {this.displayMaskingRules()}\n        </Box>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default WorkflowPostExport;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { spacing } from '@material-ui/system';\n\nimport {\n  Button as MuiButton,\n  TextField as MuiTextField,\n  Select as MuiSelect,\n  FormControl as MuiFormControl,\n  InputLabel,\n  MenuItem,\n  Box,\n  Link,\n  Checkbox,\n  Typography,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Grid as MuiGrid,\n} from '@material-ui/core';\n\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  DeleteOutline as DeleteIcon,\n} from '@material-ui/icons';\n\nimport { AgentRecord, WorkflowRecord, AgentInputRecord, WorkflowInputRecord } from '../../types/redactics';\n\nconst Grid = styled(MuiGrid)(spacing);\n\nconst Button = styled(MuiButton)(spacing);\n\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\n\nconst FormControlSpacing = styled(MuiFormControl)(spacing);\n\nconst FormControl = styled(FormControlSpacing)`\n  min-width: 200px;\n  max-width: 200px;\n`;\n\nconst WideFormControl = styled(FormControlSpacing)`\n  min-width: 400px;\n  max-width: 400px;\n`;\n\nconst TextField = styled(TextFieldSpacing)`\n  width: 200px;\n`;\n\nconst NWTableCell = withStyles({\n  root: {\n    whiteSpace: 'nowrap',\n  },\n})(TableCell);\n\nconst Select = styled(MuiSelect)(spacing);\n\nconst styles = {\n  selectAdornment: {\n    marginRight: '-30px',\n  },\n};\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\ninterface IProps {\n  agents: AgentRecord[];\n  errors?: any;\n  workflow: WorkflowRecord;\n  agentInputs: AgentInputRecord[];\n  classes: any;\n  editInputDialog: boolean;\n  triggerEditInputDialog: any;\n  saveInputChanges: any;\n  input: WorkflowInputRecord;\n  inputs: WorkflowInputRecord[];\n  handleInputChanges: any;\n  selectInputSource: any;\n  handleAddTable: any;\n  addTable: string;\n  triggerAddTable: any;\n  hideInputDialog: any;\n  deleteDatabaseTable: any;\n  handleSnackbarClose: any;\n  addTableSelection: any;\n  deleteTableSelection: any;\n}\n\ninterface IState {\n \n}\n\nclass WorkflowInputs extends React.Component<IProps, IState> {\n  getAgent() {\n    const agent = this.props.agents.filter((a:AgentRecord) => (\n      (a.uuid === this.props.workflow.agentId)));\n    // set stub result if method is called before data has been populated,\n    // there should always be an agent found\n    return (agent.length) ? agent[0] : {\n      configPath: '',\n      namespace: '',\n    };\n  }\n\n  displayTableSelection(tableSelection:string) {\n    let addButton = \"Add Table\";\n    if (tableSelection === \"allExclude\") { addButton += \" Exclusion\"; }\n    if (!this.props.input.tables || !this.props.input.tables.length) {\n      return (\n        <Box>\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.props.addTableSelection}>\n            <AddIcon />&nbsp;&nbsp;{addButton}\n          </Button>\n        </Box>\n      )\n    }\n    else {\n      return (\n        <Table size=\"small\" style={{ width: 'auto' }}>\n          <TableBody>\n            {this.props.input.tables.map((row:any, idx:number) => (\n              <TableRow key={idx}>\n                <TableCell style={{ paddingLeft: 0 }}>\n                  <TextField\n                    name=\"addSchema\"\n                    label=\"Schema\"\n                    value={row.split('.')[0]}\n                    onChange={(event) => this.props.handleAddTable(event, idx, \"schema\")}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <TextField\n                    name=\"addTable\"\n                    label=\"Table\"\n                    value={row.split('.')[1]}\n                    onChange={(event) => this.props.handleAddTable(event, idx, \"table\")}\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                  />\n                </TableCell>\n                <TableCell>\n                  <Box>\n                    <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => this.props.deleteTableSelection(idx)}>\n                      <DeleteIcon />&nbsp;&nbsp;Delete\n                    </Button>\n                  </Box>\n                </TableCell>\n              </TableRow>\n            ))}\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell></TableCell>\n              <TableCell>\n                <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.props.addTableSelection}>\n                  <AddIcon />&nbsp;&nbsp;Add\n                </Button>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      )\n    }\n  }\n\n  editInputDialogContent() { \n    return (\n      <Box>\n        {this.props.errors.JSX}\n\n        <Box mt={8}>\n          <Box display={(this.props.workflow.workflowType === \"mockDatabaseMigration\") ? \"none\" : \"block\"}>\n            <WideFormControl margin=\"dense\" fullWidth>\n              <InputLabel>\n                Table Selection\n              </InputLabel>\n              <Select\n                value={this.props.input.tableSelection}\n                name=\"tableSelection\"\n                onChange={(event) => this.props.handleInputChanges(event, this.props.input)}\n              >\n                <MenuItem key=\"\" value=\"\">None</MenuItem>\n                <MenuItem key=\"all\" value=\"all\">Select all tables in all schema</MenuItem>\n                <MenuItem key=\"allExclude\" value=\"allExclude\">Select all tables in all schema with specified exclusions</MenuItem>\n                <MenuItem key=\"specific\" value=\"specific\">Select specific tables</MenuItem>\n              </Select>\n            </WideFormControl>\n          </Box>\n\n          <Box mt={4} display={(this.props.input.tableSelection === \"allExclude\" || this.props.input.tableSelection === \"specific\") ? \"block\" : \"none\"}>\n            You can use wildcards (i.e. <code><b>*</b></code>) for broad pattern matching. For example, <b><code>public.account_*</code></b> will match all tables starting with \"account_\" in the public schema, and <b><code>company_*.users</code></b> will match all users tables in schema starting with \"company_\". If you aren't aware of what schema your tables reside in, they probably reside in <b><code>public</code></b>, which is the PostgreSQL default.\n            <Box mt={8}>\n              {this.displayTableSelection(this.props.input.tableSelection)}\n            </Box>\n          </Box>\n        </Box>\n      </Box>\n    ) \n  }\n\n  outputMockConstraints() {\n    let foundConstraints:boolean = false;\n    let tables:string = \"\";\n    let workflowInput:any = null;\n    this.props.agentInputs.forEach((input:AgentInputRecord) => {\n      if (!workflowInput) {\n        workflowInput = this.props.inputs.find((i:WorkflowInputRecord) => {\n          return (i.uuid === input.uuid)\n        });\n      }\n      if (workflowInput && workflowInput.tables && workflowInput.tables.length) {\n        foundConstraints = true;\n        tables = \"all tables except \" + workflowInput.tables.join(', ');\n      }\n    });\n    if (!foundConstraints) {\n      return (\n        <Box>\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => this.props.triggerEditInputDialog({\n            uuid: workflowInput.uuid,\n            enabled: workflowInput.enabled,\n            tableSelection: \"allExclude\",\n            tables: [\"public\"]\n          })}>\n            <AddIcon />&nbsp;&nbsp;Add Database Cloning Constraint\n          </Button>\n        </Box>\n      )\n    }\n    return (\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>Tables</TableCell>\n            <TableCell></TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow key={workflowInput.uuid}>\n            <TableCell>{tables}</TableCell>\n            <NWTableCell>\n              <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => this.props.triggerEditInputDialog(workflowInput)}>\n                <EditIcon/>&nbsp;Edit Table Selection\n              </Button>\n            </NWTableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    )\n  }\n\n  outputDataSources() {\n    if (this.props.agentInputs.length) {\n      if (this.props.workflow.workflowType === \"mockDatabaseMigration\") {\n        const selectedInput:string = (this.props.inputs && this.props.inputs.length && this.props.inputs[0]) ? this.props.inputs[0].uuid : \"\";\n        return (\n          <Box>\n            <FormControl margin=\"dense\" fullWidth>\n              <InputLabel>\n                Input Source\n              </InputLabel>\n              <Select\n                value={selectedInput}\n                name=\"inputSource\"\n                onChange={(event) => this.props.selectInputSource(event)}\n              >\n                {this.props.agentInputs.map((input:AgentInputRecord) => (\n                  <MenuItem key={input.uuid} value={input.uuid}>{input.inputName}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n              \n            <Box mt={8}>\n              <Typography variant=\"h6\" gutterBottom>\n                Database Cloning Constraints\n              </Typography>\n\n              <Grid container>\n                <Grid item xs={8}>\n                  <Typography variant=\"body1\" gutterBottom>\n                    If you want to clone your database faster you can do so by excluding certain tables which are irrelevant to testing your migration. This can be changed at any time to support your specific database migration.\n                  </Typography>\n                </Grid>\n              </Grid>\n\n              <Box mt={8}>\n                {this.outputMockConstraints()}\n              </Box>\n            </Box>\n          </Box>\n        )\n      }\n      else {\n        return (\n          <Box>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Enabled</TableCell>\n                  <TableCell>Name</TableCell>\n                  <TableCell>Tables to Extract</TableCell>\n                  <TableCell></TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {this.props.agentInputs.map((input:AgentInputRecord) => {\n                  let workflowInput:any = this.props.inputs.find((i:WorkflowInputRecord) => {\n                    return (i.uuid === input.uuid)\n                  });\n                  let inputEnabled:boolean = (workflowInput) ? workflowInput.enabled : false;\n                  let tables:string = \"none selected\";\n                  if (workflowInput) {\n                    switch (workflowInput.tableSelection) {\n                      case 'all':\n                      tables = \"all tables\";\n                      break;\n  \n                      case 'allExclude':\n                      tables = (!workflowInput.tables || !workflowInput.tables.length) ? \"all tables\" : \"all tables except \" + workflowInput.tables.join(', ');\n                      break;\n  \n                      case 'specific':\n                      tables = (!workflowInput.tables || !workflowInput.tables.length) ? \"none\" : workflowInput.tables.join(', ');\n                      break;\n                    }\n                  }\n                  else {\n                    workflowInput = {\n                      enabled: false,\n                      uuid: input.uuid,\n                      tables: [],\n                      tableSelection: \"\",\n                    }\n                  }\n                  return (\n                    <TableRow key={input.uuid}>\n                      <TableCell>\n                        <Checkbox\n                          checked={inputEnabled}\n                          name=\"enabled\"\n                          color=\"primary\"\n                          onChange={(event) => this.props.handleInputChanges(event, workflowInput)}\n                        />\n                      </TableCell>\n                      <TableCell>{input.inputName}</TableCell>\n                      <TableCell>{tables}</TableCell>\n                      <NWTableCell>\n                        <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => this.props.triggerEditInputDialog(workflowInput)}>\n                          <EditIcon/>&nbsp;Edit Table Selection\n                        </Button>\n                      </NWTableCell>\n                    </TableRow>\n                  )\n                })}\n              </TableBody>\n            </Table>\n          </Box>\n        )\n      }\n    }\n    else {\n      return (\n        <Box>\n          Workflows require at least one input source. Ensure at least one is selected within the \"Agent Settings\" section in the <Link href=\"/agents\">Agents</Link> page.\n        </Box>\n      )\n    }\n  }\n\n  /* eslint-disable max-len */\n\n  render() {\n    const title = (this.props.workflow.workflowType === \"mockDatabaseMigration\") ? \"Input Source\" : \"Input Sources\";\n    return (\n      <React.Fragment>\n        <Box mt={4}>\n          <Typography variant=\"h4\" gutterBottom>\n            {title}\n          </Typography>\n        </Box>\n\n        <Dialog\n          open={this.props.editInputDialog}\n          onClose={this.props.hideInputDialog}\n          maxWidth=\"md\"\n          aria-labelledby=\"dialog-title\"\n          aria-describedby=\"dialog-description\"\n          fullWidth\n        >\n          <DialogTitle id=\"dialog-title\">Edit Table Selection</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"dialog-description\">\n              {this.editInputDialogContent()}\n            </DialogContentText>\n\n            <DialogActions>\n              <Button color=\"secondary\" variant=\"contained\" onClick={this.props.saveInputChanges}>\n                Update\n              </Button>\n            </DialogActions>\n          </DialogContent>\n        </Dialog>\n\n        <Box mt={8}>\n          {this.outputDataSources()}\n        </Box>\n       \n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(WorkflowInputs);\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { spacing } from '@material-ui/system';\n\nimport {\n  Typography,\n  TextField as MuiTextField,\n  Select as MuiSelect,\n  FormControl as MuiFormControl,\n  InputLabel,\n  MenuItem,\n  Box,\n  Link,\n  FormControlLabel,\n  Radio,\n  RadioGroup,\n  Tooltip,\n  InputAdornment,\n} from '@material-ui/core';\n\nimport {\n  HelpOutline as HelpIcon,\n} from '@material-ui/icons';\n\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\n\nconst FormControlSpacing = styled(MuiFormControl)(spacing);\n\nconst FormControl = styled(FormControlSpacing)`\n  min-width: 200px;\n  max-width: 200px;\n`;\n\nconst TextField = styled(TextFieldSpacing)`\n  width: 200px;\n`;\n\nconst Select = styled(MuiSelect)(spacing);\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\ninterface IProps {\n  handleExportSchedule: any;\n  exportSchedule: boolean;\n  schedule: string;\n  handleSchedule: any;\n  scheduleSelection: string;\n  customSchedule: boolean;\n  workflowType: string;\n  errors: any;\n}\n\ninterface IState {\n\n}\n\nclass DatabaseSchedule extends React.Component<IProps, IState> {\n  render() {\n    return (\n      <React.Fragment>\n        <Box mt={8}>\n          <Typography variant=\"h4\" gutterBottom>\n            Workflow Schedule Options\n          </Typography>\n\n          <Box mt={4}>\n            <RadioGroup aria-label=\"exportSchedule\" name=\"exportSchedule\" onChange={this.props.handleExportSchedule} value={String(this.props.exportSchedule)}>\n              <FormControlLabel value=\"false\" control={<Radio />} label=\"Do Not Automate Workflow\" />\n              <FormControlLabel value=\"true\" control={<Radio />} label=\"Schedule/Automate Workflow\" />\n            </RadioGroup>\n          </Box>\n\n          <Box mt={2} display={(this.props.exportSchedule === true) ? 'block' : 'none'}>\n            <Box>\n              <FormControl fullWidth>\n                <InputLabel htmlFor=\"scheduleSelection\">Schedule</InputLabel>\n                <Select\n                  name=\"scheduleSelection\"\n                  onChange={this.props.handleSchedule}\n                  value={this.props.scheduleSelection}\n                >\n                  <MenuItem key=\"none\" value=\"None\">None</MenuItem>\n                  <MenuItem key=\"hourly\" value=\"@hourly\">Hourly</MenuItem>\n                  <MenuItem key=\"daily\" value=\"@daily\">Daily</MenuItem>\n                  <MenuItem key=\"weekly\" value=\"@weekly\">Weekly</MenuItem>\n                  <MenuItem key=\"monthly\" value=\"@monthly\">Monthly</MenuItem>\n                  <MenuItem key=\"custom\" value=\"custom\">Custom</MenuItem>\n                </Select>\n              </FormControl>\n            </Box>\n\n            <Box mt={4} display={(this.props.customSchedule === true) ? 'block' : 'none'}>\n              <FormControl fullWidth>\n                <TextField\n                  error={this.props.errors.schedule}\n                  name=\"schedule\"\n                  label=\"Cronjob Schedule\"\n                  value={this.props.schedule}\n                  onChange={this.props.handleSchedule}\n                  InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Schedule time as a cron expression\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                />\n                <Box mt={1}>\n                  See <Link target=\"_blank\" rel=\"noreferrer\" href=\"https://crontab.guru\"><b>Crontab Guru</b></Link> for help with generating cron schedule expressions.\n                </Box>\n              </FormControl>\n            </Box>\n          </Box>\n        </Box>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DatabaseSchedule;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { spacing } from '@material-ui/system';\n\nimport {\n  Typography,\n  TextField as MuiTextField,\n  FormControl as MuiFormControl,\n  Button as MuiButton,\n  Box,\n  Select,\n  MenuItem,\n  Tooltip,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Table,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n  Grid as MuiGrid,\n  FormControlLabel,\n  Checkbox,\n} from '@material-ui/core';\n\nimport {\n  Add as AddIcon,\n  HelpOutline as HelpIcon,\n  Edit as EditIcon,\n  DeleteOutline as DeleteIcon,\n} from '@material-ui/icons';\n\nconst Grid = styled(MuiGrid)(spacing);\n\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\n\nconst FormControlSpacing = styled(MuiFormControl)(spacing);\n\nconst FormControl = styled(FormControlSpacing)`\n  min-width: 200px;\n  max-width: 200px;\n  display: inline;\n`;\n\nconst TextField = styled(TextFieldSpacing)`\n  width: 200px;\n`;\n\nconst Button = styled(MuiButton)(spacing);\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\ninterface IProps {\n  exportTableDataConfig: any;\n  tableOutputOptions: any;\n  constraintSchema: string;\n  constraintTable: string;\n  handleTableOutputChanges: any;\n  allDatabaseTables: string[];\n  showOutputOptions: any;\n  currentDatabaseTable: string;\n  triggerOutputOptions: any;\n  deleteConstraint: any;\n  hideOutputOptions: any;\n  genConstraintSummary: any;\n}\n\ninterface IState {\n\n}\n\nclass WorkflowExport extends React.Component<IProps, IState> {\n  constructor(props:IProps) {\n    super(props);\n\n    this.displayConstraintOptions = this.displayConstraintOptions.bind(this);\n  }\n\n  displayConstraintOptions() {\n    const table = this.props.currentDatabaseTable;\n    if (!this.props.tableOutputOptions.errors) {\n      this.props.tableOutputOptions.errors = {};\n    }\n    const disableDeltaUpdates = this.props.tableOutputOptions.disableDeltaUpdates ? true : false;\n\n    return (\n      <Box mt={4}>\n        <FormControl fullWidth variant=\"outlined\">\n          <TextField\n            error={this.props.tableOutputOptions.errors.schema}\n            name=\"schema\"\n            label=\"Schema\"\n            value={this.props.constraintSchema}\n            onChange={(event) => this.props.handleTableOutputChanges(event)}\n          />\n        </FormControl>\n\n        <Box mt={4}>\n          <FormControl fullWidth variant=\"outlined\">\n            <TextField\n              error={this.props.tableOutputOptions.errors.table}\n              name=\"table\"\n              label=\"Table\"\n              value={this.props.constraintTable}\n              onChange={(event) => this.props.handleTableOutputChanges(event)}\n            />\n          </FormControl>\n        </Box>\n\n        <Box mt={4}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={disableDeltaUpdates}\n                onChange={(event) => this.props.handleTableOutputChanges(event)}\n                name=\"disableDeltaUpdates\"\n                color=\"primary\"\n              />\n            }\n            label=\"Disable Delta Updates\"\n          />\n        </Box>\n\n        <Box mt={4} display={(!disableDeltaUpdates && this.props.constraintSchema && this.props.constraintTable) ? 'block' : 'none'}>\n          <Typography variant=\"h5\" gutterBottom>\n            Table Constraints\n          </Typography>\n\n          <FormControl>\n            <Select\n              name=\"sampleFields\"\n              value={this.props.tableOutputOptions.sampleFields}\n              onChange={(event) => this.props.handleTableOutputChanges(event, table)}\n            >\n              <MenuItem key=\"created\" value=\"created\">Created</MenuItem>\n              <MenuItem key=\"updated\" value=\"updated\">Updated</MenuItem>\n              <MenuItem key=\"createdAndUpdated\" value=\"createdAndUpdated\">Created or updated</MenuItem>\n            </Select>&nbsp;&nbsp;in the last&nbsp;&nbsp;\n            <Select\n              name=\"numDays\"\n              value={this.props.tableOutputOptions.numDays}\n              onChange={(event) => this.props.handleTableOutputChanges(event, table)}\n            >\n              <MenuItem key=\"1\" value=\"1\">day</MenuItem>\n              <MenuItem key=\"2\" value=\"2\">2 days</MenuItem>\n              <MenuItem key=\"3\" value=\"3\">3 days</MenuItem>\n              <MenuItem key=\"7\" value=\"7\">1 week</MenuItem>\n              <MenuItem key=\"14\" value=\"14\">2 weeks</MenuItem>\n              <MenuItem key=\"30\" value=\"30\">month</MenuItem>\n              <MenuItem key=\"60\" value=\"60\">2 months</MenuItem>\n              <MenuItem key=\"90\" value=\"90\">3 months</MenuItem>\n              <MenuItem key=\"180\" value=\"180\">6 months</MenuItem>\n              <MenuItem key=\"365\" value=\"365\">year</MenuItem>\n            </Select>\n          </FormControl>\n\n          <Box mt={4} display={(this.props.tableOutputOptions.sampleFields.toLowerCase().includes(\"created\")) ? \"block\" : \"none\"}>\n            <FormControl fullWidth variant=\"outlined\">\n              <TextField\n                error={this.props.tableOutputOptions.errors.createdAtField}\n                name=\"createdAtField\"\n                label=\"Created At Field Name\"\n                value={this.props.tableOutputOptions.createdAtField}\n                onChange={(event) => this.props.handleTableOutputChanges(event, table)}\n                InputProps={{\n                  endAdornment: <Tooltip title=\"(Required) field name in this table used for tracking created at timestamp\" placement=\"right-start\"><HelpIcon /></Tooltip>,\n                }}\n              />\n            </FormControl>\n          </Box>\n\n          <Box mt={4} display={(this.props.tableOutputOptions.sampleFields.toLowerCase().includes(\"updated\")) ? \"block\" : \"none\"}>\n            <FormControl fullWidth variant=\"outlined\">\n              <TextField\n                error={this.props.tableOutputOptions.errors.updatedAtField}\n                name=\"updatedAtField\"\n                label=\"Updated At Field Name\"\n                value={this.props.tableOutputOptions.updatedAtField}\n                onChange={(event) => this.props.handleTableOutputChanges(event, table)}\n                InputProps={{\n                  endAdornment: <Tooltip title=\"(Required) field name in this table used for tracking updated at timestamp\" placement=\"right-start\"><HelpIcon /></Tooltip>,\n                }}\n              />\n            </FormControl>\n          </Box>\n        </Box>\n      </Box>\n    )\n  }\n\n  displayConstraintsTable() {\n    let options:any = this.props.exportTableDataConfig.filter((config:any) => {\n      return config.numDays\n    });\n\n    if (!options.length) {\n      return (\n        <Box>\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={(event) => this.props.triggerOutputOptions(event, null)}>\n            <AddIcon />&nbsp;&nbsp;Set Table Output Options\n          </Button>\n        </Box>\n      )\n    }\n    else {\n      return (\n        <Box>\n          <Grid\n            justify=\"space-between\"\n            container\n            spacing={10}\n          >\n            <Grid item></Grid>\n            <Grid item mb={6}>\n              <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={(event) => this.props.triggerOutputOptions(event, null)}>\n                <AddIcon />&nbsp;&nbsp;Set Table Output Options\n              </Button>\n            </Grid>\n          </Grid>\n\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Table</TableCell>\n                <TableCell>Constraint</TableCell>\n                <TableCell>Delta Updates Disabled</TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n            {options.map((o:any) => {\n              let tableName:string = o.table;\n              let deltaUpdatesDisabled:string = o.disableDeltaUpdates ? \"yes\" : \"no\";\n              return (\n                <TableRow key={tableName}>\n                  <TableCell>{tableName}</TableCell>\n                  <TableCell>{this.props.genConstraintSummary(tableName)}</TableCell>\n                  <TableCell>{deltaUpdatesDisabled}</TableCell>\n                  <TableCell>\n                    <Button color=\"secondary\" size=\"small\" variant=\"contained\" onClick={(event) => this.props.triggerOutputOptions(event, tableName)}>\n                      <EditIcon />&nbsp;Edit\n                    </Button>&nbsp;\n                    <Button variant=\"contained\" color=\"default\" size=\"small\" onClick={(event) => this.props.deleteConstraint(event, tableName)}>\n                      <DeleteIcon />&nbsp;Delete\n                    </Button>\n                  </TableCell>\n                </TableRow>\n              )\n            })}\n            </TableBody>\n          </Table>\n        </Box>\n      )\n    }\n  }\n\n  render() {\n    if (!this.props.allDatabaseTables) {\n      return null;\n    }\n    return (\n      <React.Fragment>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom>\n            Table Data Options\n          </Typography>\n\n          <Grid container>\n            <Grid item xs={8}>\n              <Typography variant=\"body1\" gutterBottom>\n                If you want to constrain your table outputs to a selected time range or skip attempting delta updates for specific tables you can do so by adding your configurations below. Note that if other tables depend on omitted data these relationships will be broken.\n              </Typography>\n            </Grid>\n          </Grid>\n  \n          <Dialog\n            fullWidth\n            open={this.props.showOutputOptions}\n            onClose={this.props.hideOutputOptions}\n            maxWidth=\"md\"\n            aria-labelledby=\"dialog-title\"\n            aria-describedby=\"dialog-description\"\n          >\n            <DialogTitle id=\"dialog-title\">Table Output Options</DialogTitle>\n            <DialogContent>\n              <DialogContentText id=\"dialog-description\">\n                {this.displayConstraintOptions()}\n              </DialogContentText>\n\n              <DialogActions>\n                <Button color=\"secondary\" variant=\"contained\" onClick={this.props.hideOutputOptions}>\n                  Update\n                </Button>\n              </DialogActions>\n            </DialogContent>\n          </Dialog>\n\n          <Box mt={8}>\n            {this.displayConstraintsTable()}\n          </Box>\n        </Box>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default WorkflowExport;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { spacing } from '@material-ui/system';\n\nimport {\n  Grid as MuiGrid,\n  Typography,\n  TextField as MuiTextField,\n  FormControl as MuiFormControl,\n  Button as MuiButton,\n  Box,\n  Link,\n  Checkbox,\n  Tooltip,\n  InputAdornment,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper as MuiPaper,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  ExpansionPanel,\n  ExpansionPanelSummary,\n  ExpansionPanelDetails as MuiExpansionPanelDetails,\n  List,\n  ListItem,\n  ListItemText,\n  Select,\n  InputLabel,\n  MenuItem,\n  FormControlLabel,\n} from '@material-ui/core';\n\nimport {\n  Add as AddIcon,\n  DeleteOutline as DeleteIcon,\n  Edit as EditIcon,\n  HelpOutline as HelpIcon,\n  ExpandMore as ExpandMoreIcon,\n} from '@material-ui/icons';\n\nimport {\n  HardDrive as HardDriveIcon,\n  Code as CodeIcon,\n} from 'react-feather';\n\nimport { WorkflowInputRecord, InputRecord, CustomSecret, DataFeed, AgentRecord, WorkflowRecord, PostUpdateParam } from '../../types/redactics';\n\nimport { Alert as MuiAlert } from '@material-ui/lab';\n\nconst Grid = styled(MuiGrid)(spacing);\n\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\n\nconst FormControlSpacing = styled(MuiFormControl)(spacing);\n\nconst FormControl = styled(FormControlSpacing)`\n  min-width: 200px;\n  max-width: 200px;\n`;\n\nconst TextField = styled(TextFieldSpacing)`\n  width: 200px;\n`;\n\nconst MedTextField = styled(TextFieldSpacing)`\n  width: 400px;\n`;\n\nconst WideTextField = styled(TextFieldSpacing)`\n  width: 600px;\n`;\n\nconst bold = {\n  fontWeight: \"bold\"\n};\n\nconst Alert = styled(MuiAlert)(spacing);\n\nconst ExpansionPanelDetails = withStyles({\n  root: {\n    display: 'block',\n  },\n})(MuiExpansionPanelDetails);\n\nconst NWTableCell = withStyles({\n  root: {\n    whiteSpace: 'nowrap',\n  },\n})(TableCell);\n\nconst Paper = styled(MuiPaper)(spacing);\n\nconst Button = styled(MuiButton)(spacing);\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\ninterface IProps {\n  inputs: WorkflowInputRecord[];\n  handleDeleteSecret: any;\n  agentNamespace?: string;\n  dataFeeds: DataFeed[];\n  dataFeed: DataFeed;\n  hideDataFeed: any;\n  addDataFeed: any;\n  editDataFeed: boolean;\n  addParameterValue: any;\n  updateParameterValue: any;\n  deleteParameterValue: any;\n  handleDataFeed: any;\n  handleDataFeedBack: any;\n  handleDataFeedCancel: any;\n  handleDataFeedOptions: any;\n  saveDataFeedChanges: any;\n  triggerEditDataFeed: any;\n  deleteDataFeed: any;\n  errors: any;\n  handleCustomSecret: any;\n  addSecret: any;\n  agents: AgentRecord[];\n  workflow: WorkflowRecord;\n}\n\ninterface IState {\n\n}\n\nclass WorkflowPostExport extends React.Component<IProps, IState> {\n  /* eslint-disable max-len */\n\n  databaseEngine(engine:string) {\n    let displayEngine:string = \"\";\n    switch (engine) {\n      case 'postgresql':\n        displayEngine = \"PostgreSQL\";\n      break;\n\n      default:\n      break;\n    }\n\n    return displayEngine;\n  }\n\n  dataFeedName(df:string) {\n    let dataFeed:string = \"\";\n    switch (df) {\n      case 'digitalTwin':\n        dataFeed = \"Create a PII-free Digital Twin/Clone\";\n      break;\n      \n      case 's3upload':\n        dataFeed = \"Upload/Sync Data to an Amazon S3 bucket\";\n      break;\n\n      case 'custom':\n        dataFeed = \"Custom Container/Plugin\";\n      break;\n\n      default:\n      break;\n    }\n\n    return dataFeed;\n  }\n\n  dataFeedSummary(df:any) {\n    let dataFeedSummary:string = \"\";\n    let uploadBucket:string = df.dataFeedConfig.S3UploadBucket;\n    if (df.dataFeedConfig.S3UploadBucket && !df.dataFeedConfig.S3UploadBucket.match(/^s3:\\/\\//)) {\n      uploadBucket = \"s3://\" + df.dataFeedConfig.S3UploadBucket;\n    }\n    switch (df.dataFeed) {\n      case 'digitalTwin':\n      dataFeedSummary = \"Data will be cloned to your \" + this.databaseEngine(df.dataFeedConfig.databaseEngine) + \" database and will be \";\n      dataFeedSummary += (df.dataFeedConfig.enableDeltaUpdates) ? \"updated with new data\" : \"reset to match the original data\";\n      if (df.dataFeedConfig.enablePostUpdatePreparedStatements) {\n        let preparedStatementValues:string[] = [];\n        df.dataFeedConfig.postUpdateKeyValues.forEach((kv:PostUpdateParam) => {\n          if (kv.key && kv.value) {\n            preparedStatementValues.push(kv.value);\n          }\n        })\n        if (preparedStatementValues.length) {\n          dataFeedSummary+= \". After each time the workflow runs your data will be modified with the following values: \" + preparedStatementValues.join(', ') + \".\";\n        }\n      }\n      break;\n      \n      case 's3upload':\n      dataFeedSummary = \"Upload tables to \" + uploadBucket;\n      break;\n\n      case 'custom':\n      dataFeedSummary = \"Invoke custom container \" + df.dataFeedConfig.image + \":\" + df.dataFeedConfig.tag;\n      break;\n\n      default:\n      break;\n    }\n\n    return dataFeedSummary;\n  }\n\n  outputTable() {\n    if (this.props.dataFeeds && this.props.dataFeeds.length) {\n      return (\n        <Box>\n          <Grid\n            justify=\"space-between\"\n            container\n            spacing={10}\n          >\n            <Grid item></Grid>\n            <Grid item mb={6}>\n              <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.props.addDataFeed}>\n                <AddIcon />&nbsp;\n                Add Data Feed\n              </Button>\n            </Grid>\n          </Grid>\n\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>Data Feed</TableCell>\n                <TableCell>Summary</TableCell>\n                <TableCell></TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.props.dataFeeds.map((df:DataFeed) => (\n                <TableRow key={df.uuid}>\n                  <TableCell>{this.dataFeedName(df.dataFeed)}</TableCell>\n                  <TableCell>{this.dataFeedSummary(df)}</TableCell>\n                  <NWTableCell>\n                    <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => this.props.triggerEditDataFeed(df)}>\n                      <EditIcon/>&nbsp;Edit\n                    </Button>&nbsp;\n                    <Button variant=\"contained\" color=\"default\" size=\"small\" onClick={() => this.props.deleteDataFeed(df)}>\n                      <DeleteIcon />&nbsp;Delete\n                    </Button>\n                  </NWTableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </Box>\n      )\n    }\n    else {\n      return (\n        <Box>\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.props.addDataFeed}>\n            <AddIcon />&nbsp;\n            Add Data Feed\n          </Button>\n        </Box>\n      )\n    }\n  }\n\n  showErrors() {\n    if (this.props.errors.duplicateDataFeed) {\n      return (\n        <Alert mb={4} severity=\"error\">You can only create one of each type of Data Feed</Alert>\n      )\n    }\n    else if (this.props.errors.invalidBucketName) {\n      return (\n        <Alert mb={4} severity=\"error\">Invalid Amazon S3 bucket name. <Link target=\"_blank\" href=\"https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html\">Naming guidelines</Link></Alert>\n      )\n    }\n    else if (this.props.errors.invalidPostUpdateKeyValues) {\n      return (\n        <Alert mb={4} severity=\"error\">Invalid parameter key or value. Parameters must not be empty and must not contain %, (, or ) characters</Alert>\n      )\n    }\n    else if (this.props.errors.invalidSecret) {\n      return (\n        <Alert mb={4} severity=\"error\">One or more of your secrets is missing a value - all fields are required</Alert>\n      )\n    }\n    return null;\n  }\n\n  getAgent() {\n    const agent = this.props.agents.filter((a:AgentRecord) => (\n      (a.uuid === this.props.workflow.agentId)));\n    // set stub result if method is called before data has been populated,\n    // there should always be an agent found\n    return (agent.length) ? agent[0] : {\n      configPath: '',\n      namespace: '',\n    };\n  }\n\n  render() {\n    const namespaceTip = this.props.dataFeed.feedSecrets.length ? (\n      <p>\n        Be sure that any secrets that need to be attached to your post-processing Docker container exist in this same Kubernetes namespace.\n      </p>\n    ) : '';\n\n    return (\n      <React.Fragment>\n        <Box mt={8}>\n          <Typography variant=\"h4\" gutterBottom>\n            Data Feeds\n          </Typography>\n\n          <Dialog\n            open={this.props.editDataFeed}\n            onClose={this.props.hideDataFeed}\n            fullWidth\n            maxWidth=\"md\"\n            aria-labelledby=\"dialog-title\"\n            aria-describedby=\"dialog-description\"\n          >\n            <DialogTitle id=\"dialog-title\">{(!this.props.dataFeed.uuid.match(/^new/)) ? \"Edit\" : \"Add\"} Data Feed</DialogTitle>\n            <DialogContent>\n              <DialogContentText id=\"dialog-description\">\n                {this.showErrors()}\n\n                <Box display={(this.props.dataFeed.dataFeed === '') ? 'block' : 'none'}>\n                  <List component=\"nav\" aria-label=\"data feed selection\">\n                    <ListItem disabled={!(this.props.workflow.workflowType === \"ERL\")} button onClick={() => this.props.handleDataFeed('digitalTwin')}>\n                      <ListItemText\n                        primary=\"Create a PII-free Digital Twin/Clone\"\n                        primaryTypographyProps={{ style: bold }}\n                        secondary=\"Creates a PII-free clone of your data to a target/output database. Any data written in the target tables is replaced by the data from your source/input.\" \n                      />\n                    </ListItem>\n\n                    <ListItem disabled={!(this.props.workflow.workflowType === \"ERL\")} button onClick={() => this.props.handleDataFeed('s3upload')}>\n                      <ListItemText\n                        primary=\"Upload/Sync Data to an Amazon S3 Bucket\"\n                        primaryTypographyProps={{ style: bold }}\n                        secondary=\"Upload your table data CSV files to an Amazon S3 bucket.\" \n                      />\n                    </ListItem>\n\n                    <ListItem disabled={!(this.props.workflow.workflowType === \"ERL\")} button onClick={() => this.props.handleDataFeed('custom')}>\n                      <ListItemText\n                        primary=\"Configure a Custom Container/Plugin\"\n                        primaryTypographyProps={{ style: bold }}\n                        secondary=\"Trigger your own custom container to carry out work of your choosing.\" \n                      />\n                    </ListItem>\n                  </List>\n                </Box>\n\n                <Box mt={8} display={(this.props.dataFeed.dataFeed === 'digitalTwin') ? 'block' : 'none'}>\n                  <Typography variant=\"h4\" gutterBottom>\n                    Digital Twin Options\n                  </Typography>\n\n                  <p>Adding this data feed will require updating your Agent configuration file (provided within the <Link href=\"/agents\" target=\"_blank\">Agents</Link> page), replacing the \"changeme\"s for connection ID <code>{this.props.dataFeed.uuid}</code> with the specified connection info for this data source.</p>\n\n                  <p><b>This feature does not prevent you from accidentally destroying data by selecting the wrong output destination!</b> Your output destination will be populated with the entire public schema, the schema of your selected tables from your data source, and the table data from your selected tables. We strongly advise that your output destination be an empty/unused database (you can create a new database with the <code>create database</code> SQL command) in order to avoid collisions and unintended overwriting.</p>\n\n                  <Box mt={4}>\n                    <FormControl margin=\"dense\" fullWidth>\n                      <InputLabel>\n                        Output Destination\n                      </InputLabel>\n                      <Select\n                        value={this.props.dataFeed.dataFeedConfig.inputSource}\n                        name=\"inputSource\"\n                        onChange={(event) => this.props.handleDataFeedOptions(event)}\n                      >\n                        {this.props.workflow.allOutputs.map((input:InputRecord) => (\n                          <MenuItem key={input.uuid} value={input.uuid}>{input.inputName}</MenuItem>\n                        ))}\n                      </Select>\n                    </FormControl>\n                  </Box>\n                 \n                  <Box mt={4}>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={this.props.dataFeed.dataFeedConfig.enableDeltaUpdates}\n                          onChange={(event) => this.props.handleDataFeedOptions(event)}\n                          name=\"enableDeltaUpdates\"\n                          color=\"primary\"\n                        />\n                      }\n                      label=\"Enable Delta Updates\"\n                    />\n                    <Box>\n                      After your initial job has run your workflow performance can be increased substantially by only transferring changed data, rather than recreating tables from scratch. Leave this disabled to hard-reset your data each time your workflow runs.\n                    </Box>\n                  </Box>\n\n                  <Box mt={4} display={(this.props.dataFeed.dataFeedConfig.enableDeltaUpdates) ? 'block' : 'none'}>\n                    <FormControl fullWidth>\n                      <TextField\n                        error={this.props.errors.invalidDeltaUpdateField}\n                        name=\"deltaUpdateField\"\n                        value={this.props.dataFeed.dataFeedConfig.deltaUpdateField}\n                        onChange={(event) => this.props.handleDataFeedOptions(event)}\n                        label=\"Updated Date Field Name\"\n                        InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Field name in your table that contains the timestamp tracking the last updated date, e.g. &quot;updated_at&quot;\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                      />\n                    </FormControl>\n                  </Box>\n\n                  <Box mt={4}>\n                    <FormControlLabel\n                      control={\n                        <Checkbox\n                          checked={this.props.dataFeed.dataFeedConfig.enablePostUpdatePreparedStatements}\n                          onChange={(event) => this.props.handleDataFeedOptions(event)}\n                          name=\"enablePostUpdatePreparedStatements\"\n                          color=\"primary\"\n                        />\n                      }\n                      label=\"Enable Custom Data Updates\"\n                    />\n                    <Box>\n                      Run custom SQL commands after your workflows run to make custom updates to your data. One use case for this is personalizing demos (e.g. to specify the name and logo of the company you are demoing to). To do so, you'll need to define a prepared SQL statement (i.e. an SQL command supporting parameters), as well as the values for these parameters.\n                    </Box>\n\n                    <Box mt={4} display={(this.props.dataFeed.dataFeedConfig.enablePostUpdatePreparedStatements) ? 'block' : 'none'}>\n                      <Box>\n                        As an example, in <code>UPDATE company SET name=%(company_name)s, logo=%(logo)s WHERE source_primary_key=%(company_id)s</code>, the three parameters in this prepared SQL statement are <code>company_name</code>, <code>logo</code>, and <code>company_id</code>. See below for the instructions for defining your prepared statements, and click on the <b>Add Parameter Value</b> button below these instructions to define the key/value pairs for each parameter in your prepared statement(s). For example, for the company_name parameter your parameter key would be <code>company_name</code>, and your parameter value: <code>Company we are demoing to</code>.\n                      </Box>\n\n                      <Box mt={4}>\n                        <Paper variant=\"outlined\">\n                          <ExpansionPanel>\n                            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                              <Typography>Prepared Statement Setup Instructions</Typography>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                              <Box>\n                                Prepared statements are SQL commands saved as Kubernetes secrets. Here is an example prepared statement: <code>UPDATE company SET name=%(name)s, logo=%(logo)s WHERE source_primary_key=%(company_id)s</code>. In this example <code>name</code>, <code>logo</code> and <code>company_id</code> are placeholder parameters requiring values, which you'll set below. Parameter key/value pairs are required rather than entire SQL commands for security reasons, and to make it easy for anybody in your company to change these values without running the risk of corrupting your data. To create this secret as per this example:<br/><br/>\n                                <code>kubectl create secret -n {this.getAgent().namespace} generic digital-twin --from-literal=prepared-statements=\"UPDATE company SET name=%(name)s, logo=%(logo)s WHERE source_primary_key=%(company_id)s;\"</code><br/><br/>\n                                Create your own prepared statements by replacing what is quoted here.<br/><br/>Multiple SQL commands are supported, separated by semicolons, and please note that the format of <code>%(your_variable)s</code> is required for all variable types (including non-strings) - the correct type will be automatically cast. All paraemters require that a value is provided.\n                              </Box>\n                            </ExpansionPanelDetails>\n                          </ExpansionPanel>\n                        </Paper>\n                      </Box>\n\n                      <Box mt={4}>\n                        <Table size=\"small\" style={{ width: 'auto' }}>\n                          <TableBody>\n                            {this.props.dataFeed.dataFeedConfig.postUpdateKeyValues.map((kv:PostUpdateParam, idx:number) => (\n                              <TableRow key={idx}>\n                                <TableCell style={{ paddingLeft: 0 }}>\n                                  <FormControl>\n                                    <TextField\n                                      variant=\"outlined\"\n                                      margin=\"dense\"\n                                      name=\"parameterKey\"\n                                      value={kv.key}\n                                      onChange={(event) => this.props.updateParameterValue(idx, event)}\n                                      label=\"Parameter Key\"\n                                    />\n                                  </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                  <FormControl>\n                                    <TextField\n                                      variant=\"outlined\"\n                                      margin=\"dense\"\n                                      name=\"parameterValue\"\n                                      value={kv.value}\n                                      onChange={(event) => this.props.updateParameterValue(idx, event)}\n                                      label=\"Parameter Value\"\n                                    />\n                                  </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                  <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={() => this.props.deleteParameterValue(idx)}>\n                                    <DeleteIcon />\n                                  </Button>\n                                </TableCell>\n                              </TableRow>\n                            ))}\n                          </TableBody>\n                        </Table>\n                        <Box mt={4}>\n                          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.props.addParameterValue}>\n                            <AddIcon />&nbsp;&nbsp;Add Parameter Value\n                          </Button>\n                        </Box>\n                      </Box>\n                    </Box>\n                  </Box>\n                </Box>\n\n                <Box mt={8} display={(this.props.dataFeed.dataFeed === 's3upload') ? 'block' : 'none'}>\n                  <Typography variant=\"h4\" gutterBottom>\n                    Amazon S3 File Upload Options\n                  </Typography>\n\n                  <Box mt={8}>\n                    <FormControl fullWidth variant=\"outlined\">\n                      <MedTextField\n                        name=\"S3UploadBucket\"\n                        error={this.props.errors.invalidBucketName}\n                        onChange={(event) => this.props.handleDataFeedOptions(event)}\n                        value={this.props.dataFeed.dataFeedConfig.S3UploadBucket}\n                        label=\"S3 Bucket\"\n                        InputProps={{\n                          startAdornment: <InputAdornment position=\"start\"><b>S3://</b></InputAdornment>,\n                        }}\n                      />\n                    </FormControl>\n                  </Box>\n                  \n                  <Box mt={8}>\n                    <Paper variant=\"outlined\">\n                      <ExpansionPanel>\n                        <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                          <Typography>Plugin Requirements</Typography>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                          <p>\n                            This plugin requires an AWS access key ID and secret access key pair to authenticate to the provided bucket. Create an AWS credentials file in the style of the <code>~/.aws/credentials</code> example provided <Link href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html\" target=\"_blank\">here</Link> and run the following command to create a secret in your Kubernetes cluster namespace as the contents of this file:\n                          </p>\n                          <p>\n                            <code>\n                              kubectl create secret generic aws -n {this.props.agentNamespace || 'unknown_namespace'} --from-file=/path/to/aws/credentials\n                            </code>\n                          </p>\n                        </ExpansionPanelDetails>\n                      </ExpansionPanel>\n                    </Paper>\n                  </Box>\n                  \n                </Box>\n\n                <Box mt={8} display={(this.props.dataFeed.dataFeed === 'custom') ? 'block' : 'none'}>\n                  <Box>\n                    <Typography variant=\"h4\" gutterBottom>\n                      Custom Container/Plugin Configuration\n                    </Typography>\n\n                    <p>Some documentation for developing your own custom container/plugin can be found on the <Link href=\"/developers\" target=\"_blank\">developers page</Link>.\n                    </p>\n                  </Box>\n\n                  <Box mt={4}>\n                    <MedTextField\n                      name=\"image\"\n                      error={this.props.errors.image}\n                      value={this.props.dataFeed.dataFeedConfig.image}\n                      onChange={(event) => this.props.handleDataFeedOptions(event)}\n                      label=\"Docker Image\"\n                      placeholder=\"amazon/aws-cli\"\n                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Docker image URL (Dockerhub example: 'amazon/aws-cli')\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                    />\n                  </Box>\n                  <Box mt={4}>\n                    <MedTextField\n                      name=\"tag\"\n                      error={this.props.errors.tag}\n                      value={this.props.dataFeed.dataFeedConfig.tag}\n                      onChange={(event) => this.props.handleDataFeedOptions(event)}\n                      label=\"Docker Image Tag\"\n                      placeholder=\"latest\"\n                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Image tag/version (e.g. 'latest', '5.0.0')\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                    />\n                  </Box>\n                  <Box mt={4}>\n                    <MedTextField\n                      name=\"shell\"\n                      error={this.props.errors.shell}\n                      value={this.props.dataFeed.dataFeedConfig.shell}\n                      onChange={(event) => this.props.handleDataFeedOptions(event)}\n                      label=\"Shell Path\"\n                      placeholder=\"/bin/bash\"\n                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Custom container commands will be prefaced with this shell path, i.e. <shell path> -c '<command>' '<args>'\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                    />\n                  </Box>\n                  <Box mt={4}>\n                    <WideTextField\n                      name=\"command\"\n                      multiline\n                      rowsMax=\"4\"\n                      value={this.props.dataFeed.dataFeedConfig.command}\n                      onChange={(event) => this.props.handleDataFeedOptions(event)}\n                      label=\"Command (optional)\"\n                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Optional command to override container default, in Docker this field name is 'entrypoint'.\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                    />\n                  </Box>\n\n                  <Box mt={4}>\n                    <WideTextField\n                      name=\"args\"\n                      multiline\n                      rowsMax=\"4\"\n                      value={this.props.dataFeed.dataFeedConfig.args}\n                      onChange={(event) => this.props.handleDataFeedOptions(event)}\n                      label=\"Args (optional)\"\n                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Optional command to override container default, in Docker this field name is 'cmd'.\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                    />\n                  </Box>\n\n                  <Button variant=\"contained\" color=\"secondary\" mt={4} size=\"small\" onClick={() => { this.props.addSecret('volume'); }}>\n                    <HardDriveIcon />&nbsp;\n                    Attach Secret Disk/Volume to Container\n                  </Button>&nbsp;<Button variant=\"contained\" color=\"secondary\" mt={4} size=\"small\" onClick={() => { this.props.addSecret('env'); }}>\n                    <CodeIcon />&nbsp;\n                    Attach Environment Variable to Container\n                  </Button>\n\n                  <Box mt={8}>\n                    {namespaceTip}\n                    <Table size=\"small\" style={{ width: 'auto' }}>\n                      <TableBody>\n                        {this.props.dataFeed.feedSecrets.map((secret:CustomSecret, idx:number) => {\n                          if (secret.secretType === 'volume') {\n                            return (\n                              <TableRow key={idx}>\n                                <TableCell style={{ paddingLeft: 0 }}>\n                                  <HardDriveIcon />\n                                </TableCell>\n                                <TableCell>\n                                  <FormControl fullWidth>\n                                    <TextField\n                                      name=\"secretName\"\n                                      value={secret.secretName}\n                                      label=\"Secret Name\"\n                                      variant=\"outlined\"\n                                      margin=\"dense\"\n                                      onChange={(event) => this.props.handleCustomSecret(event, idx)}\n                                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Kubernetes secret name as it appears in 'kubectl get secrets'\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                                    />\n                                  </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                  <FormControl fullWidth>\n                                    <TextField\n                                      name=\"secretKey\"\n                                      value={secret.secretKey}\n                                      label=\"Secret Key\"\n                                      variant=\"outlined\"\n                                      margin=\"dense\"\n                                      onChange={(event) => this.props.handleCustomSecret(event, idx)}\n                                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Kubernetes secret key contained within this secret\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                                    />\n                                  </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                  <FormControl fullWidth>\n                                    <TextField\n                                      name=\"secretPath\"\n                                      value={secret.secretPath}\n                                      label=\"Secret Container Path\"\n                                      variant=\"outlined\"\n                                      margin=\"dense\"\n                                      onChange={(event) => this.props.handleCustomSecret(event, idx)}\n                                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Path to mount this secret within your container\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                                    />\n                                  </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                  <Button variant=\"contained\" size=\"small\" color=\"secondary\" onClick={() => this.props.handleDeleteSecret(idx)}>\n                                    <DeleteIcon />&nbsp;&nbsp;Delete\n                                  </Button>\n                                </TableCell>\n                              </TableRow>\n                            );\n                          }\n                          if (secret.secretType === 'env') {\n                            return (\n                              <TableRow>\n                                <TableCell style={{ paddingLeft: 0 }}>\n                                  <CodeIcon />\n                                </TableCell>\n                                <TableCell>\n                                  <FormControl fullWidth>\n                                    <TextField\n                                      name=\"secretName\"\n                                      value={secret.secretName}\n                                      label=\"Secret Name\"\n                                      variant=\"outlined\"\n                                      margin=\"dense\"\n                                      onChange={(event) => this.props.handleCustomSecret(event, idx)}\n                                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Kubernetes secret name as it appears in 'kubectl get secrets'\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                                    />\n                                  </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                  <FormControl fullWidth>\n                                    <TextField\n                                      name=\"secretKey\"\n                                      value={secret.secretKey}\n                                      label=\"Secret Key\"\n                                      variant=\"outlined\"\n                                      margin=\"dense\"\n                                      onChange={(event) => this.props.handleCustomSecret(event, idx)}\n                                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Kubernetes secret key contained within this secret\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                                    />\n                                  </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                  <FormControl fullWidth>\n                                    <TextField\n                                      name=\"envName\"\n                                      value={secret.envName}\n                                      label=\"Variable Name\"\n                                      variant=\"outlined\"\n                                      margin=\"dense\"\n                                      onChange={(event) => this.props.handleCustomSecret(event, idx)}\n                                      InputProps={{ endAdornment: <InputAdornment position=\"end\"><Tooltip title=\"Environment variable name to be presented to this container, often in all caps\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n                                    />\n                                  </FormControl>\n                                </TableCell>\n                                <TableCell>\n                                  <Button variant=\"contained\" size=\"small\" color=\"secondary\" onClick={() => this.props.handleDeleteSecret(idx)}>\n                                    <DeleteIcon />&nbsp;&nbsp;Delete\n                                  </Button>\n                                </TableCell>\n                              </TableRow>\n                            );\n                          }\n\n                          return null;\n                        })}\n                      </TableBody>\n                    </Table>\n                  </Box>\n              </Box>\n              </DialogContentText>\n\n              <DialogActions>\n                <Box display={(this.props.dataFeed.dataFeed !== '') ? 'block' : 'none'}>\n                  <Button\n                    color=\"default\"\n                    variant=\"contained\"\n                    onClick={this.props.handleDataFeedBack}\n                  >\n                    Back\n                  </Button>&nbsp;\n                  <Button\n                    color=\"secondary\"\n                    variant=\"contained\"\n                    onClick={this.props.saveDataFeedChanges}\n                  >\n                    Update\n                  </Button>\n                </Box>\n                <Box display={(this.props.dataFeed.dataFeed === '') ? 'block' : 'none'}>\n                  <Button color=\"secondary\" onClick={this.props.handleDataFeedCancel}>\n                    Cancel\n                  </Button>\n                </Box>\n              </DialogActions>\n            </DialogContent>\n          </Dialog>\n\n          <Grid container>\n            <Grid item xs={8}>\n              <Typography variant=\"body1\" gutterBottom>\n                Data feeds provide several options for populating and/or syncing data with your No PII Zone on a recurring basis and sharing data with your internal and external stakeholders. With or without a data feed you can retrieve output files via the <code>Download Export</code> command provided by the <Link href=\"/developers\" target=\"_blank\">Redactics Agent CLI</Link>.\n              </Typography>\n            </Grid>\n          </Grid>\n\n          <Box mt={8}>\n            {this.outputTable()}\n          </Box>\n        </Box>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default WorkflowPostExport;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport { spacing } from '@material-ui/system';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  TextField as MuiTextField,\n  FormControl as MuiFormControl,\n  Button,\n  Box,\n  Select,\n  MenuItem,\n  Tooltip,\n  InputAdornment,\n  InputLabel,\n  Paper,\n  ExpansionPanel,\n  ExpansionPanelDetails as MuiExpansionPanelDetails,\n  ExpansionPanelSummary,\n  Typography,\n} from '@material-ui/core';\n\nimport {\n  HelpOutline as HelpIcon,\n  ExpandMore as ExpandMoreIcon,\n} from '@material-ui/icons';\n\nimport {\n  Clipboard as ClipboardIcon,\n} from 'react-feather';\n\nimport { WorkflowRecord } from '../../types/redactics';\n\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\n\nconst FormControlSpacing = styled(MuiFormControl)(spacing);\n\nconst FormControl = styled(FormControlSpacing)`\n  min-width: 200px;\n  max-width: 200px;\n`;\n\nconst TextField = styled(TextFieldSpacing)`\n  width: 200px;\n`;\n\nconst ExpansionPanelDetails = withStyles({\n  root: {\n    display: 'block',\n  },\n})(MuiExpansionPanelDetails);\n\nconst styles = {\n  selectAdornment: {\n    marginRight: '-30px',\n  },\n};\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable no-useless-escape */\n\ninterface IProps {\n  workflow: WorkflowRecord;\n  handleWFChanges: any;\n  classes: any;\n  inputs: any;\n  agentNamespace: string;\n  clipboardCopy: any;\n}\n\ninterface IState {\n\n}\n\nclass DatabaseMigrationSetup extends React.Component<IProps, IState> {\n  render() {\n    const helmHook = `\n{{- if .Values.global.databaseMigrations.mock }}\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: trigger-db-migration-mock-{{ .Release.Revision }}\n  namespace: ${this.props.workflow.migrationNamespace || \"default\"}\n  annotations:\n    \"helm.sh/hook\": pre-upgrade\n    \"helm.sh/hook-weight\": \"${this.props.workflow.migrationHelmHookWeight || \"0\"}\"\n    \"helm.sh/hook-delete-policy\": hook-succeeded\nspec:\n  template:\n    spec:\n      restartPolicy: Never\n      containers:\n        - name: trigger-db-migration-mock\n          image: redactics/airflow-dagrun-poller:1.1.0\n          imagePullPolicy: Always\n          args:\n          - bash\n          - -c\n          - |\n              DAG_RUN_ID=$(curl -s -X POST -d \"{\\\\\"workflowType\\\\\": \\\\\"mockDatabaseMigration\\\\\", \\\\\"workflowId\\\\\": \\\\\"\\${WORKFLOW_ID}\\\\\"}\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" \\${REDACTICS_API_URL}/workflow/jobs | jq -r '.uuid')\n              curl -s -X POST -H \"Authorization: Basic \\${BASIC_AUTH}\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" -d \"{\\\\\"dag_run_id\\\\\": \\\\\"\\${DAG_RUN_ID}\\\\\", \\\\\"conf\\\\\": {\\\\\"workflowJobId\\\\\": \\\\\"\\${DAG_RUN_ID}\\\\\"}}\" \\${API_URL}/api/v1/dags/\\${DAG_ID}/dagRuns\n              TAIL_TASK_ID=clone-db DAG_RUN_ID=\\${DAG_RUN_ID} /poller.sh\n              if [ $? -ne 0 ]; then\n                exit 1\n              fi\n          env:\n          - name: REDACTICS_API_URL\n            value: http://agent-api.svc.cluster.local\n          - name: API_URL\n            value: http://agent-webserver.${this.props.agentNamespace}.svc.cluster.local:8080\n          - name: DAG_ID\n            value: ${this.props.workflow.uuid}-migrationmocking\n          - name: WORKFLOW_ID\n            value: ${this.props.workflow.uuid}\n          - name: BASIC_AUTH\n            valueFrom:\n              secretKeyRef:\n                name: agent\n                key: basic-auth\n{{- end }}`\n\n    const script = `\n#!/bin/bash\n\n# change values as necessary, this script will work when running inside a Kubernetes container, and when the\n# BASIC_AUTH variable is set outside of this script from values stored as Kubernetes secrets.\n# The open source libraries \"curl\" and \"jq\" must be available within this environment, in addition to the poller.sh script.\n\nexport REDACTICS_API_URL=http://agent-api.svc.cluster.local\nexport API_URL=http://agent-webserver.${this.props.agentNamespace}.svc.cluster.local:8080\nexport DAG_ID=${this.props.workflow.uuid}-migrationmocking\nexport WORKFLOW_ID=${this.props.workflow.uuid}\nexport POLLER_PATH=/poller.sh\n\nDAG_RUN_ID=$(curl -s -X POST -d \"{\\\\\"workflowType\\\\\": \\\\\"mockDatabaseMigration\\\\\", \\\\\"workflowId\\\\\": \\\\\"\\${WORKFLOW_ID}\\\\\"}\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" \\${REDACTICS_API_URL}/workflow/jobs | jq -r '.uuid')\ncurl -s -X POST -H \"Authorization: Basic \\${BASIC_AUTH}\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" -d \"{\\\\\"dag_run_id\\\\\": \\\\\"\\${DAG_RUN_ID}\\\\\", \\\\\"conf\\\\\": { \\\\\"workflowJobId\\\\\": \\\\\"\\${DAG_RUN_ID}\\\\\"}}\" \\${API_URL}/api/v1/dags/\\${DAG_ID}/dagRuns\nTAIL_TASK_ID=clone-db DAG_RUN_ID=\\${DAG_RUN_ID} \\${POLLER_PATH}\n    `\n    \n    return (\n      <React.Fragment>\n        <Box>\n          Performing a dry run of your migrations requires your adding a step to your CI/CD pipeline (or manual deployment process) to trigger a workflow included in the Redactics Agent. This workflow clones your database to prepare for your database migration dry-run against this clone. Once this step is complete you can then run your migration using an environment variable to override your database that would normally be used with your cloned database.\n        </Box>\n\n        <Box mt={4}>\n          One way to put together a complete working flow is to add some sort of flag in your CI/CD workflow that triggers this alteration to your normal workflow when this database migration dry-run option is selected, followed by the database migration against the clone. This can be done by triggering a script that runs on your server hosting your app, or if your database migration is triggered via a Kubernetes Helmchart hook, adding an additional hook that runs before your normal migration hook.\n        </Box>\n\n        <Box mt={4}>\n          Using the values you provide here, we will generate the code needed to perform this additional step (prior to your normal database migration) which you can customize as needed. We will also generate an authentication token for the REST API embedded into the Redactics Agent. This secret will be installed into your Kubernetes namespace (as you've provided below) the next time you upgrade your Redactics Agent software.\n        </Box>\n\n        <Box mt={8}>\n          <FormControl fullWidth>\n            <TextField\n              //error={this.props.errors.migrationNamespace}\n              name=\"migrationNamespace\"\n              label=\"Kubernetes Namespace\"\n              value={this.props.workflow.migrationNamespace}\n              onChange={(event) => this.props.handleWFChanges(event, this.props.workflow.uuid)}\n              InputProps={{ endAdornment: <InputAdornment className={this.props.classes.selectAdornment} position=\"end\"><Tooltip title=\"Kubernetes namespace where your database migrations run\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n            />\n          </FormControl>\n        </Box>\n\n        <Box mt={4}>\n          <FormControl fullWidth>\n            <TextField\n              //error={this.props.errors.migrationDatabase}\n              name=\"migrationDatabase\"\n              label=\"Database Name\"\n              value={this.props.workflow.migrationDatabase}\n              onChange={(event) => this.props.handleWFChanges(event, this.props.workflow.uuid)}\n              InputProps={{ endAdornment: <InputAdornment className={this.props.classes.selectAdornment} position=\"end\"><Tooltip title=\"Database name of database that should be cloned\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n            />\n          </FormControl>\n        </Box>\n\n        <Box mt={4}>\n          <FormControl fullWidth>\n            <TextField\n              //error={this.props.errors.migrationDatabaseClone}\n              name=\"migrationDatabaseClone\"\n              label=\"Cloned Database Name\"\n              value={this.props.workflow.migrationDatabaseClone}\n              onChange={(event) => this.props.handleWFChanges(event, this.props.workflow.uuid)}\n              InputProps={{ endAdornment: <InputAdornment className={this.props.classes.selectAdornment} position=\"end\"><Tooltip title=\"Database name for your clone\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n            />\n          </FormControl>\n        </Box>\n\n        <Box mt={4}>\n          <FormControl fullWidth>\n            <InputLabel htmlFor=\"agent\">Generate Configuration For</InputLabel>\n            <Select\n              //error={this.props.errors.migrationConfiguration}\n              name=\"migrationConfiguration\"\n              value={this.props.workflow.migrationConfiguration}\n              onChange={(event) => this.props.handleWFChanges(event, this.props.workflow.uuid)}\n            >\n              <MenuItem key=\"helmhook\" value=\"helmhook\">Sample Helmchart Hook</MenuItem>\n              <MenuItem key=\"script\" value=\"script\">Sample Script</MenuItem>\n            </Select>\n          </FormControl>\n        </Box>\n\n        <Box mt={4} display={(this.props.workflow.migrationConfiguration === \"helmhook\") ? \"block\" : \"none\"}>\n          <FormControl fullWidth>\n            <TextField\n              //error={this.props.errors.migrationDatabaseClone}\n              name=\"migrationHelmHookWeight\"\n              type=\"number\"\n              label=\"Helmchart Hook Weight\"\n              value={this.props.workflow.migrationHelmHookWeight || \"0\"}\n              onChange={(event) => this.props.handleWFChanges(event, this.props.workflow.uuid)}\n              InputProps={{ endAdornment: <InputAdornment className={this.props.classes.selectAdornment} position=\"end\"><Tooltip title=\"Helmchart hook weight (hooks are executed in ascending order)\" placement=\"right-start\"><HelpIcon /></Tooltip></InputAdornment> }}\n            />\n          </FormControl>\n        </Box>\n\n        <Box mt={8} display={(this.props.workflow.migrationConfiguration === \"helmhook\") ? \"block\" : \"none\"}>\n          <Paper variant=\"outlined\">\n            <ExpansionPanel>\n              <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography>Sample Helmchart Hook</Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                <Box>\n                  <CopyToClipboard text={helmHook} onCopy={() => this.props.clipboardCopy(\"sampleMigrationHook\")}>\n                    <Button variant=\"outlined\" size=\"small\" color=\"secondary\"><ClipboardIcon /></Button>\n                  </CopyToClipboard>\n                </Box>\n                <Box mt={2}>\n                  <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>\n                    {helmHook}\n                  </pre>\n                </Box>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n          </Paper>\n        </Box>\n\n        <Box mt={8} display={(this.props.workflow.migrationConfiguration === \"script\") ? \"block\" : \"none\"}>\n          <Paper variant=\"outlined\">\n            <ExpansionPanel>\n              <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography>Sample Script</Typography>\n              </ExpansionPanelSummary>\n              <ExpansionPanelDetails>\n                <Box>\n                  <CopyToClipboard text={script} onCopy={() => this.props.clipboardCopy(\"sampleMigrationScript\")}>\n                    <Button variant=\"outlined\" size=\"small\" color=\"secondary\"><ClipboardIcon /></Button>\n                  </CopyToClipboard>\n                </Box>\n                <Box mt={2}>\n                  <pre style={{ whiteSpace: 'pre-wrap', wordBreak: 'break-all' }}>\n                    {script}\n                  </pre>\n                </Box>\n              </ExpansionPanelDetails>\n            </ExpansionPanel>\n          </Paper>\n        </Box>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withStyles(styles)(DatabaseMigrationSetup);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { withStyles } from '@material-ui/core/styles';\n\n// import { red, green, blue } from \"@material-ui/core/colors\";\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nimport {\n  Card as MuiCard,\n  CardContent,\n  Grid as MuiGrid,\n  Typography,\n  Button as MuiButton,\n  Box,\n  Snackbar,\n  IconButton,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  Paper,\n  ExpansionPanel,\n  ExpansionPanelDetails as MuiExpansionPanelDetails,\n  ExpansionPanelSummary,\n  FormControl as MuiFormControl,\n  InputLabel,\n  Select as MuiSelect,\n  MenuItem,\n} from '@material-ui/core';\n\nimport { Alert as MuiAlert } from '@material-ui/lab';\n\nimport {\n  ExpandMore as ExpandMoreIcon,\n  DeleteOutline as DeleteIcon,\n  Close as CloseIcon,\n} from '@material-ui/icons';\n\nimport {\n  Save as SaveIcon,\n  Clipboard as ClipboardIcon,\n} from 'react-feather';\n\nimport { spacing } from '@material-ui/system';\nimport RedacticsContext from '../../contexts/RedacticsContext';\n\nimport WorkflowRedactionRules from './WorkflowRedactionRules';\nimport WorkflowInputs from './WorkflowInputs';\nimport WorkflowSchedule from './WorkflowSchedule';\nimport WorkflowExport from './WorkflowExport';\nimport WorkflowPostExport from './WorkflowPostExport';\nimport DatabaseMigrationSetup from './DatabaseMigrationSetup';\n\nimport {\n  RedactRule, CustomSecret, WorkflowRecord, WorkflowUpdate, PostUpdateParam,\n  AgentRecord, RedactRulePreset, RedactRuleSet, DataFeed, AgentInputRecord, \n  WorkflowInputRecord,\n} from '../../types/redactics';\n\nconst Card = styled(MuiCard)(spacing);\n\nconst Grid = styled(MuiGrid)(spacing);\n\nconst Button = styled(MuiButton)(spacing);\n\nconst Alert = styled(MuiAlert)(spacing);\n\nconst styles = {\n  selectAdornment: {\n    marginRight: '-30px',\n  },\n};\n\nconst FormControlSpacing = styled(MuiFormControl)(spacing);\n\nconst FormControl = styled(FormControlSpacing)`\n  min-width: 200px;\n  max-width: 200px;\n`;\n\nconst Select = styled(MuiSelect)(spacing);\n\nconst ExpansionPanelDetails = withStyles({\n  root: {\n    display: 'block',\n  },\n})(MuiExpansionPanelDetails);\n\ninterface IProps {\n  deleteWorkflow: any;\n  handleWFChanges: any;\n  workflow: WorkflowRecord;\n  agentInputs: AgentInputRecord[];\n  agents: AgentRecord[];\n  presets?: RedactRulePreset[];\n  redactrulesets: RedactRuleSet[];\n  redactrules?: RedactRule[];\n  classes: any;\n}\n\ninterface IState {\n  errors: any;\n  agentId: string;\n  saveButtonDisabled: boolean;\n  agentNamespace?: string;\n  addAllS3Uploads: boolean;\n  S3UploadBucket: string;\n  tableOutputOptions: any;\n  constraintSchema: string;\n  constraintTable: string;\n  exportTableSchemaAll: boolean;\n  exportTableDataAll: boolean;\n  S3UploadFileChecked: string[];\n  exportTableDataConfig: any;\n  displayExportTableData: string;\n  displayExportTableSchema: string;\n  customSchedule: boolean;\n  scheduleSelection: string;\n  schedule: string;\n  exportSchedule: boolean;\n  maskingRuleValues: RedactRule[];\n  maskingRules: RedactRule[];\n  numMaskingRules: number;\n  newRuleKey: number;\n  input: WorkflowInputRecord;\n  inputs: WorkflowInputRecord[];\n  dataFeed: DataFeed;\n  dataFeeds: DataFeed[];\n  newInputKey: number;\n  newDataFeedKey: number;\n  addTable: string;\n  transformExpanded: boolean;\n  outputExpanded: boolean;\n  allDatabaseTables: string[];\n  currentDatabaseTable: string;\n  numInputs: number;\n  workflowType: string;\n  deltaUpdateField: string;\n  snackbarText: string;\n  // dialog toggles\n  showDialog: boolean;\n  showSnackbar: boolean;\n  helmReminderCheckbox: boolean;\n  showHelmReminder: boolean;\n  validDiskSize: boolean;\n  validName: boolean;\n  validSchedule: boolean;\n  missingSecretField: boolean;\n  invalidOutputSettingField: boolean;\n  missingPostExportHookField: boolean;\n  missingSchemaSelection: boolean;\n  dupeTableExportFound: boolean;\n  dupeRedactRuleFound: boolean;\n  completeRedactRules: boolean;\n  deleteWorkflowConfirmation: boolean;\n  showLastReportedError: boolean;\n  ackHelmReminder: boolean;\n  orphanedWorkflow: boolean;\n  editInputDialog: boolean;\n  showSnackbarEdit: boolean;\n  showOutputOptions: boolean;\n  editDataFeed: boolean;\n  invalidDeltaUpdate: boolean;\n  invalidPreparedStatement: boolean;\n  mockMigrationDatabase: boolean;\n  invalidDigitalTwinOutput: boolean;\n  invalidForgetUserFields: boolean;\n  invalidMigrationFields: boolean;\n  digitalTwinAdded: boolean;\n  // snackbar toggles\n  showClipboardSnackbar: boolean;\n}\n\nclass Workflow extends React.Component<IProps, IState> {\n  static contextType = RedacticsContext;\n\n  constructor(props:IProps) {\n    super(props);\n\n    this.saveChanges = this.saveChanges.bind(this);\n    this.hideHelmReminder = this.hideHelmReminder.bind(this);\n    this.toggleHelmReminder = this.toggleHelmReminder.bind(this);\n    this.addMaskingRule = this.addMaskingRule.bind(this);\n    this.deleteMaskingRule = this.deleteMaskingRule.bind(this);\n    this.handleRuleChange = this.handleRuleChange.bind(this);\n    this.showLastReportedError = this.showLastReportedError.bind(this);\n    this.hideLastReportedError = this.hideLastReportedError.bind(this);\n    this.addSecret = this.addSecret.bind(this);\n    this.handleDeleteSecret = this.handleDeleteSecret.bind(this);\n    this.hideErrorDialog = this.hideErrorDialog.bind(this);\n    this.handleExportSchedule = this.handleExportSchedule.bind(this);\n    this.handleSchedule = this.handleSchedule.bind(this);\n    this.handleDeltaUpdate = this.handleDeltaUpdate.bind(this);\n    this.handleCustomSecret = this.handleCustomSecret.bind(this);\n    this.validateRedactionRules = this.validateRedactionRules.bind(this);\n    this.handleTableOutputChanges = this.handleTableOutputChanges.bind(this);\n    this.deleteWorkflowConfirmation = this.deleteWorkflowConfirmation.bind(this);\n    this.cancelWorkflowConfirmation = this.cancelWorkflowConfirmation.bind(this);\n    this.clipboardCopy = this.clipboardCopy.bind(this);\n    this.handleSnackbarClose = this.handleSnackbarClose.bind(this);\n    this.getExportFileNames = this.getExportFileNames.bind(this);\n    this.saveInputChanges = this.saveInputChanges.bind(this);\n    this.triggerEditInputDialog = this.triggerEditInputDialog.bind(this);\n    this.handleInputChanges = this.handleInputChanges.bind(this);\n    this.selectInputSource = this.selectInputSource.bind(this);\n    this.handleAddTable = this.handleAddTable.bind(this);\n    this.triggerAddTable = this.triggerAddTable.bind(this);\n    this.hideInputDialog = this.hideInputDialog.bind(this);\n    this.deleteDatabaseTable = this.deleteDatabaseTable.bind(this);\n    this.deleteWorkflow = this.deleteWorkflow.bind(this);\n    this.transformExpansion = this.transformExpansion.bind(this);\n    this.triggerOutputOptions = this.triggerOutputOptions.bind(this);\n    this.deleteConstraint = this.deleteConstraint.bind(this);\n    this.hideOutputOptions = this.hideOutputOptions.bind(this);\n    this.genConstraintSummary = this.genConstraintSummary.bind(this);\n    this.addDataFeed = this.addDataFeed.bind(this);\n    this.hideDataFeed = this.hideDataFeed.bind(this);\n    this.handleDataFeed = this.handleDataFeed.bind(this);\n    this.addParameterValue = this.addParameterValue.bind(this);\n    this.updateParameterValue = this.updateParameterValue.bind(this);\n    this.deleteParameterValue = this.deleteParameterValue.bind(this);\n    this.handleDataFeedBack = this.handleDataFeedBack.bind(this);\n    this.handleDataFeedCancel = this.handleDataFeedCancel.bind(this);\n    this.handleDataFeedOptions = this.handleDataFeedOptions.bind(this);\n    this.saveDataFeedChanges = this.saveDataFeedChanges.bind(this);\n    this.triggerEditDataFeed = this.triggerEditDataFeed.bind(this);\n    this.deleteDataFeed = this.deleteDataFeed.bind(this);\n    this.resetDataFeedErrors = this.resetDataFeedErrors.bind(this);\n    this.addTableSelection = this.addTableSelection.bind(this);\n    this.deleteTableSelection = this.deleteTableSelection.bind(this);\n    //this.saveFeedback = this.saveFeedback.bind(this);\n\n    const maskingRuleValues:RedactRule[] = [];\n    if (this.props.workflow.redactrules && this.props.workflow.redactrules.length) {\n      this.props.workflow.redactrules.forEach((rule:RedactRule) => {\n        let t = rule.table.split('.');\n        let schema = t.length ? t[0] : 'public';\n        let table = t.length ? t[1] : '';\n        maskingRuleValues.push({\n          key: rule.uuid,\n          schema,\n          table,\n          databaseTable: rule.databaseTable,\n          column: rule.column,\n          rule: rule.rule,\n          presetUuid: rule.presetUuid,\n        });\n      });\n    }\n\n    const thisAgentSearch = this.props.agents.find(\n      (a:AgentRecord) => ((a.uuid === this.props.workflow.agentId)),\n    );\n    const agentNamespace = (thisAgentSearch) ? thisAgentSearch.namespace : '';\n\n    const state:IState = {\n      agentId: this.props.workflow.agentId,\n      newRuleKey: 0,\n      transformExpanded: (this.props.workflow.allDatabaseTables && this.props.workflow.allDatabaseTables.length) ? true : false,\n      outputExpanded: false,\n      allDatabaseTables: this.props.workflow.allDatabaseTables,\n      saveButtonDisabled: false,\n      showHelmReminder: false,\n      helmReminderCheckbox: false,\n      showLastReportedError: false,\n      maskingRules: [],\n      maskingRuleValues,\n      completeRedactRules: true,\n      dupeRedactRuleFound: false,\n      dupeTableExportFound: false,\n      missingSchemaSelection: false,\n      missingSecretField: false,\n      invalidOutputSettingField: false,\n      missingPostExportHookField: false,\n      validSchedule: true,\n      validName: true,\n      validDiskSize: true,\n      numMaskingRules: maskingRuleValues.length,\n      exportSchedule: !!((this.props.workflow.schedule && this.props.workflow.schedule !== 'None')),\n      scheduleSelection: (this.props.workflow.schedule && !this.props.workflow.schedule.match(/^@/) && this.props.workflow.schedule !== 'None') ? 'custom' : this.props.workflow.schedule || '',\n      customSchedule: !!((this.props.workflow.schedule && !this.props.workflow.schedule.match(/^@/) && this.props.workflow.schedule !== 'None')),\n      schedule: this.props.workflow.schedule || 'None',\n      tableOutputOptions: {\n        errors: {},\n        numDays: 30,\n        sampleFields: \"createdAndUpdated\",\n        createdAtField: \"created_at\",\n        updatedAtField: \"updated_at\",\n        disableDeltaUpdates: false,\n      },\n      constraintSchema: \"public\",\n      constraintTable: \"\",\n      exportTableDataConfig: [],\n      addTable: '',\n      displayExportTableSchema: 'none',\n      displayExportTableData: 'none',\n      showClipboardSnackbar: false,\n      agentNamespace,\n      S3UploadFileChecked: [],\n      S3UploadBucket: '',\n      errors: {\n        schedule: false,\n        name: false,\n        diskSize: false,\n        duplicateDataFeed: false,\n      },\n      input: {\n        uuid: \"\",\n        enabled: true,\n        tables: [],\n        tableSelection: \"\"\n      },\n      inputs: this.props.workflow.inputs,\n      numInputs: this.props.workflow.inputs.length,\n      dataFeed: {\n        uuid: \"\",\n        dataFeed: \"\",\n        dataFeedConfig: {\n          postUpdateKeyValues: []\n        },\n        feedSecrets: [],\n      },\n      dataFeeds: this.props.workflow.datafeeds,\n      editInputDialog: false,\n      showDialog: false,\n      showSnackbarEdit: false,\n      newInputKey: 0,\n      newDataFeedKey: 0,\n      addAllS3Uploads: false,\n      exportTableSchemaAll: false,\n      exportTableDataAll: false,\n      showSnackbar: false,\n      deleteWorkflowConfirmation: false,\n      ackHelmReminder: false,\n      orphanedWorkflow: false,\n      currentDatabaseTable: \"\",\n      showOutputOptions: false,\n      editDataFeed: false,\n      invalidDeltaUpdate: false,\n      invalidPreparedStatement: false,\n      mockMigrationDatabase: false,\n      invalidDigitalTwinOutput: false,\n      invalidForgetUserFields: false,\n      invalidMigrationFields: false,\n      digitalTwinAdded: false,\n      workflowType: '',\n      deltaUpdateField: this.props.workflow.deltaUpdateField || \"\",\n      snackbarText: \"\"\n    };\n\n    if (Object.keys(this.props.workflow.exportTableDataConfig).length) {\n      Object.keys(this.props.workflow.exportTableDataConfig).forEach((idx:any) => {\n        const table:string = Object.keys(this.props.workflow.exportTableDataConfig[idx])[0];\n        const config:any = this.props.workflow.exportTableDataConfig[idx][table];\n        state.exportTableDataConfig.push({\n          table,\n          numDays: config.numDays,\n          sampleFields: config.sampleFields,\n          createdAtField: config.createdAtField,\n          updatedAtField: config.updatedAtField,\n          disableDeltaUpdates: config.disableDeltaUpdates,\n        });\n      });\n    }\n\n    this.props.redactrulesets.forEach((rule:RedactRuleSet) => {\n      state.maskingRules.push({\n        schema: '',\n        table: '',\n        databaseTable: '',\n        column: '',\n        rule: '',\n        key: rule.redactKey,\n        val: rule.redactName,\n      });\n    });\n\n    if (this.props.presets && this.props.presets.length) {\n      this.props.presets.forEach((preset:RedactRulePreset) => {\n        if (!preset.isDefault) {\n          state.maskingRules.push({\n            schema: '',\n            table: '',\n            databaseTable: '',\n            column: '',\n            rule: '',\n            key: `preset-${preset.uuid}`,\n            val: `Preset: ${preset.presetName}`,\n            presetUuid: preset.uuid,\n          });\n        }\n      });\n    }\n\n    // look for orphaned workflows\n    if (this.props.workflow.workflowType === \"ERL\" && !this.props.workflow.agentId) {\n      state.orphanedWorkflow = true;\n    }\n\n    // init state\n    this.state = state;\n  }\n\n  componentDidMount() {\n    // copy context data into component state\n    this.setState({\n      ackHelmReminder: this.context.ackHelmReminder,\n    });\n  }\n\n  clipboardCopy(copied:string) {\n    let copiedText:string = \"\";\n    switch (copied) {\n      case 'dbuuid':\n      copiedText = \"This workflow UUID has been copied to your clipboard\";\n      break;\n\n      case 'sampleMigrationHook':\n      copiedText = \"This sample Helmchart hook has been copied to your clipboard\";\n      break;\n\n      case 'sampleMigrationScript':\n      copiedText = \"This sample script has been copied to your clipboard\";\n      break;\n    }\n    this.setState({\n      showClipboardSnackbar: true,\n      snackbarText: copiedText,\n    });\n  }\n\n  handleRuleChange(key:string, event:any) {\n    const { maskingRuleValues } = this.state;\n    const values = this.state.maskingRuleValues.filter((value:RedactRule) => value.key === key);\n\n    maskingRuleValues.map((row:RedactRule) => {\n      if (row.key === key && event.target.name === 'databaseTable') {\n        values[0].databaseTable = event.target.value;\n      } else if (row.key === key && event.target.name === 'schema') {\n        values[0].schema = event.target.value;\n      } else if (row.key === key && event.target.name === 'table') {\n        values[0].table = event.target.value;\n      } else if (row.key === key && event.target.name === 'column') {\n        values[0].column = event.target.value;\n      } else if (row.key === key && event.target.name === 'rule') {\n        values[0].rule = event.target.value;\n        if (event.target.value.match(/^preset-/)) {\n          const preset = this.state.maskingRules.filter((mr:RedactRule) => {\n            if (mr.key === event.target.value) {\n              return mr;\n            }\n\n            return false;\n          });\n          values[0].presetUuid = preset[0].presetUuid;\n        } else {\n          values[0].presetUuid = '';\n        }\n      }\n\n      return values;\n    });\n\n    this.setState({\n      maskingRuleValues,\n    });\n\n    // console.log(maskingRuleValues)\n  }\n\n  async saveChanges(workflowId:string) {\n    // console.log(this.state);\n\n    this.setState({\n      saveButtonDisabled: true,\n      errors: {},\n    });\n\n    // prep exportTableDataConfig\n    let exportTableDataConfig:any = [];\n    this.state.exportTableDataConfig.forEach((c:any) => {\n      const config = c;\n      delete config.errors;\n      let exportTableDataConfigObj:any = {};\n      exportTableDataConfigObj[config.table] = config;\n      exportTableDataConfig.push(exportTableDataConfigObj)\n    });\n\n    const payload:WorkflowUpdate = {\n      name: this.props.workflow.name,\n      agentId: this.props.workflow.agentId,\n      workflowType: this.props.workflow.workflowType,\n      inputs: this.state.inputs,\n      dataFeeds: this.state.dataFeeds,\n      maskingRules: this.state.maskingRuleValues,\n      schedule: this.state.schedule,\n      exportTableDataConfig,\n      deltaUpdateField: this.state.deltaUpdateField,\n      migrationNamespace: this.props.workflow.migrationNamespace,\n      migrationDatabase: this.props.workflow.migrationDatabase,\n      migrationDatabaseClone: this.props.workflow.migrationDatabaseClone,\n      migrationConfiguration: this.props.workflow.migrationConfiguration,\n      migrationHelmHookWeight: this.props.workflow.migrationHelmHookWeight,\n    };\n\n    //console.log('PAYLOAD', payload);\n    //console.log(this.state);\n\n    if (this.validateRedactionRules() && this.validateMigrationMockFields()) {\n      try {\n        const response = await fetch(`${this.context.apiUrl}/workflow/${workflowId}`, {\n          method: 'put',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(payload),\n        });\n\n        this.setState({\n          saveButtonDisabled: false,\n        });\n\n        const data = await response.json();\n\n        if (data.errors) {\n          let invalidSchedule:boolean = false;\n          let orphanedWorkflow:boolean = false;\n          let invalidDeltaUpdate:boolean = false;\n          let invalidPreparedStatement:boolean = false;\n          let mockMigrationDatabase:boolean = false;\n          let invalidDigitalTwinOutput:boolean = false;\n          const invalidScheduleError = \"Invalid schedule\";\n          const orphanedWorkflowError = \"Invalid agent ID\";\n          const invalidDeltaUpdateError = \"You must provide your delta update field to enable delta updates\";\n          const invalidPreparedStatementError = \"You must provide some key/value pairs for your prepared statements\";\n          const mockMigrationDatabaseError = \"Your input and target database cannot be identical\";\n          const invalidDigitalTwinOutputError = \"Your digital twin output cannot be the same as your input\";\n          \n          if (Array.isArray(data.errors)) {\n            // multiple errors found\n            invalidSchedule = data.errors.find((e:any) => ((e.msg === invalidScheduleError)));\n            orphanedWorkflow = data.errors.find((e:any) => ((e.msg === orphanedWorkflowError) && e.param === 'agentId'));\n            invalidDeltaUpdate = data.errors.find((e:any) => ((e.msg === invalidDeltaUpdateError)));\n            invalidPreparedStatement = data.errors.find((e:any) => ((e.msg === invalidPreparedStatementError)));\n            mockMigrationDatabase = data.errors.find((e:any) => ((e.msg === mockMigrationDatabaseError)));\n            invalidDigitalTwinOutput = data.errors.find((e:any) => ((e.msg === invalidDigitalTwinOutputError)));\n          }\n          else {\n            // single error returned as string\n            invalidSchedule = (data.errors === invalidScheduleError) ? true : false;\n            orphanedWorkflow = (data.errors === orphanedWorkflowError) ? true : false;\n            invalidPreparedStatement = (data.errors === invalidPreparedStatementError) ? true : false;\n            mockMigrationDatabase = (data.errors === mockMigrationDatabaseError) ? true : false;\n            invalidDigitalTwinOutput = (data.errors === invalidDigitalTwinOutputError) ? true : false;\n          }\n          if (invalidSchedule) {\n            this.setState({\n              validSchedule: false,\n              errors: {\n                schedule: true,\n              },\n            });\n          } else if (orphanedWorkflow) {\n            this.setState({\n              orphanedWorkflow: true,\n              errors: {\n                agentId: true,\n              },\n            });\n          } else if (invalidDeltaUpdate) {\n            this.setState({\n              invalidDeltaUpdate: true,\n            });\n          } else if (invalidPreparedStatement) {\n            this.setState({\n              invalidPreparedStatement: true,\n            });\n          } else if (mockMigrationDatabase) {\n            this.setState({\n              mockMigrationDatabase: true,\n            });\n          } else if (invalidDigitalTwinOutput) {\n            this.setState({\n              invalidDigitalTwinOutput: true,\n            });\n          }\n          return;\n        }\n\n        // attach new redact rule UUIDs to state\n        const maskingRuleValues = this.state.maskingRuleValues.map((r:RedactRule, idx:number) => {\n          const rule = r;\n          rule.key = data.redactRuleUuids[idx];\n          return rule;\n        });\n\n        this.setState({\n          showDialog: (data.updateHelmConfig) ? true : false,\n          showSnackbar: (data.updateHelmConfig) ? false : true,\n          maskingRuleValues,\n          saveButtonDisabled: false,\n          numInputs: this.state.inputs.length,\n        });\n      } catch (err) {\n        // console.log('CATCH ERR', error);\n\n        this.setState({\n          saveButtonDisabled: false,\n        });\n      }\n    } else {\n      this.setState({\n        saveButtonDisabled: false,\n      });\n    }\n  }\n\n  async hideHelmReminder() {\n    if (this.state.helmReminderCheckbox) {\n      // record acknowledgement of reminder (for embedded agent config feature)\n      await fetch(`${this.context.apiUrl}/workflow/ackReminder`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      this.setState({\n        ackHelmReminder: true,\n        showDialog: false,\n      });\n    } else {\n      this.setState({\n        showDialog: false,\n      });\n    }\n  }\n\n  toggleHelmReminder(event:any) {\n    this.setState({\n      helmReminderCheckbox: event.target.checked,\n    });\n  }\n\n  missingInput() {\n    const inputs = this.state.inputs.find((input:WorkflowInputRecord) => {\n      return (input.enabled === true && input.tableSelection)\n    });\n    return (inputs) ? false : true;\n  }\n\n  validateRedactionRules() {\n    // skip validation if GUI disabled\n    if (this.missingInput()) { return true; }\n\n    const rules:string[] = [];\n    let dupeRedactRuleFound = false;\n\n    const validFields = this.state.maskingRuleValues.filter((rule:RedactRule) => {\n      let missingFields:number = 0;\n\n      if (rules.includes(`${rule.databaseTable}.${rule.table}.${rule.column}`)) {\n        dupeRedactRuleFound = true;\n      } else {\n        rules.push(`${rule.databaseTable}.${rule.table}.${rule.column}`);\n      }\n\n      if (!rule.databaseTable) { missingFields++; }\n      if (!rule.column) { missingFields++; }\n      if (!rule.rule) { missingFields++; }\n\n      if (missingFields === 1 || missingFields === 2 || !this.legalName(rule.column)) {\n        // allow blanks and complete sets\n        return rule;\n      }\n\n      return false;\n    });\n\n    const validRules = !((validFields.length || dupeRedactRuleFound));\n    const completeRedactRules = !validFields.length;\n\n    this.setState({\n      completeRedactRules,\n      dupeRedactRuleFound,\n    });\n    return validRules;\n  }\n\n  validateMigrationMockFields() {\n    if (this.props.workflow.workflowType === \"mockDatabaseMigration\") {\n      if (!this.props.workflow.migrationNamespace || !this.props.workflow.migrationDatabase || \n        !this.props.workflow.migrationDatabaseClone || !this.props.workflow.migrationConfiguration) {\n        this.setState({\n          invalidMigrationFields: true\n        })\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hideErrorDialog() {\n    this.setState({\n      completeRedactRules: true,\n      dupeRedactRuleFound: false,\n      dupeTableExportFound: false,\n      validSchedule: true,\n      validName: true,\n      validDiskSize: true,\n      missingSchemaSelection: false,\n      missingPostExportHookField: false,\n      missingSecretField: false,\n      invalidOutputSettingField: false,\n      orphanedWorkflow: false,\n      invalidDeltaUpdate: false,\n      invalidPreparedStatement: false,\n      mockMigrationDatabase: false,\n      invalidDigitalTwinOutput: false,\n      invalidForgetUserFields: false,\n      invalidMigrationFields: false,\n    });\n  }\n\n  deleteMaskingRule(key:string) {\n    const maskingRuleValues = this.state.maskingRuleValues.filter(\n      (row:RedactRule) => (row.key !== key),\n    );\n\n    this.setState({\n      numMaskingRules: (this.state.numMaskingRules - 1),\n      maskingRuleValues,\n    });\n  }\n\n  addMaskingRule() {\n    const { maskingRuleValues } = this.state;\n\n    const numMaskingRules = this.state.numMaskingRules + 1;\n    const newRuleKey = this.state.newRuleKey + 1; // random array idx value\n    maskingRuleValues.push({\n      key: `new${newRuleKey}`,\n      databaseTable: '',\n      schema: 'public',\n      table: '',\n      column: '',\n      rule: '',\n    });\n\n    this.setState({\n      maskingRuleValues,\n      numMaskingRules,\n      newRuleKey,\n    });\n  }\n\n  addTableSelection() {\n    const state:IState = this.state;\n    state.input.tables.push(localStorage.getItem(\"schema\") || \"public\");\n    this.setState(state);\n  }\n\n  deleteTableSelection(idx:number) {\n    const state:IState = this.state;\n    let table = state.input.tables[idx];\n\n    state.input.tables = state.input.tables.filter((t:string) => {\n      return (t !== table)\n    })\n    state.inputs = state.inputs.map((i:any) => {\n      if (i.uuid === state.input.uuid) {\n        return state.input;\n      }\n      return i;\n    })\n    this.setState(state);\n  }\n\n  handleSnackbarClose = () => {\n    this.setState({\n      showSnackbar: false,\n      showSnackbarEdit: false,\n      showClipboardSnackbar: false,\n    });\n  };\n\n  deleteWorkflowConfirmation() {\n    this.setState({\n      deleteWorkflowConfirmation: true,\n    });\n  }\n\n  cancelWorkflowConfirmation() {\n    this.setState({\n      deleteWorkflowConfirmation: false,\n    });\n  }\n\n  displayLastReportedError() {\n    return this.props.workflow.lastStackTrace ? this.props.workflow.lastStackTrace.split('\\n').map((text:string, index:number) => <React.Fragment key={`${text}-${index}`}>\n        {text}\n        <br />\n      </React.Fragment>) : '';\n  }\n\n  showLastReportedError(event:any) {\n    event.preventDefault();\n\n    this.setState({\n      showLastReportedError: true,\n    });\n  }\n\n  hideLastReportedError() {\n    this.setState({\n      showLastReportedError: false,\n    });\n  }\n\n  static displayStatus(lastTask:string) {\n    if (lastTask) {\n      return (\n        <Box mt={8}>\n          <Typography variant=\"h6\" gutterBottom>\n            Status\n          </Typography>\n\n          Last task: <b>{lastTask}</b>\n        </Box>\n      );\n    }\n\n    return null;\n  }\n\n  // handleDataTableDelete(table:string) {\n  //   const exportTableDataConfig = this.state.exportTableDataConfig.filter(\n  //     (t:string) => t !== table,\n  //   );\n\n  //   this.setState({\n  //     exportTableDataConfig,\n  //   });\n  // }\n\n  handleCustomSecret(event:any, idx:number) {\n    const state:IState = this.state;\n    state.dataFeed.feedSecrets[idx][event.target.name] = event.target.value;\n\n    this.setState({\n      dataFeed: state.dataFeed,\n    });\n  }\n\n  addSecret(secretType:string) {\n    const state:IState = this.state;\n    state.dataFeed.feedSecrets.push({\n      secretType,\n      secretName: '',\n      secretKey: '',\n      secretPath: '',\n    });\n\n    this.setState({\n      dataFeed: state.dataFeed,\n    });\n  }\n\n  handleDeleteSecret(idx:number) {\n    const state:IState = this.state;\n    state.dataFeed.feedSecrets = state.dataFeed.feedSecrets.filter(\n      (secret:any, i:number) => i !== idx,\n    );\n\n    this.setState({\n      dataFeed: state.dataFeed,\n    });\n  }\n\n  handleExportSchedule(event:any) {\n    if (event.target.value === 'false') {\n      this.setState({\n        exportSchedule: false,\n        schedule: 'None',\n      });\n    } else {\n      this.setState({\n        exportSchedule: true,\n        schedule: '* 0 * * *',\n      });\n    }\n  }\n\n  handleSchedule(event:any) {\n    const state:any = {};\n    if (event.target.name === 'scheduleSelection') {\n      state.scheduleSelection = event.target.value;\n      state.customSchedule = (event.target.value === 'custom');\n    }\n    state.schedule = (event.target.value === 'custom') ? '* 0 * * *' : event.target.value;\n    this.setState(state);\n  }\n\n  handleDeltaUpdate(event:any) {\n    this.setState({\n      deltaUpdateField: event.target.value\n    });\n  }\n\n  dbUUIDSnackbar() {\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'right',\n        }}\n        open={this.state.showClipboardSnackbar}\n        autoHideDuration={8000}\n        onClose={this.handleSnackbarClose}\n        ContentProps={{\n          'aria-describedby': 'message-id',\n        }}\n        message={<span id=\"message-id\">{this.state.snackbarText}</span>}\n        action={[\n          <IconButton\n            key=\"close\"\n            aria-label=\"Close\"\n            color=\"inherit\"\n            onClick={this.handleSnackbarClose}\n          >\n            <CloseIcon />\n          </IconButton>,\n        ]}\n      />\n    );\n  }\n\n  getExportFileNames() {\n    const filenames:string[] = [];\n    this.state.exportTableDataConfig.forEach((t:string) => {\n      filenames.push(`table-${t}.csv`);\n    });\n\n    return filenames;\n  }\n\n  handleTableOutputChanges(event:any, table:string) {\n    const state:IState = this.state;\n    if (!table) {\n      table = state.constraintSchema + \".\" + state.constraintTable;\n    }\n    if (!state.tableOutputOptions) {\n      state.tableOutputOptions = {\n        numDays: 30,\n        sampleFields: \"createdAndUpdated\",\n        createdAtField: \"created_at\",\n        updatedAtField: \"updated_at\",\n        disableDeltaUpdates: false,\n      } \n    }\n\n    if (event.target.name === \"schema\") {\n      state.constraintSchema = event.target.value;\n    }\n    else if (event.target.name === \"table\") {\n      state.constraintTable = event.target.value;\n    }\n\n\n    // transfer data that should be saved to exportTableDataConfig\n    switch (event.target.name) {\n      case 'createdAtField':\n      case 'numDays':\n      case 'sampleFields':\n      case 'updatedAtField':\n        state.tableOutputOptions[event.target.name] = event.target.value;\n        break;\n\n      case 'disableDeltaUpdates':\n        state.tableOutputOptions[event.target.name] = event.target.checked;\n        break;\n\n      default:  \n        break;\n    }\n    this.setState(state);\n  }\n\n  triggerEditInputDialog(input:WorkflowInputRecord) {\n    // dereference\n    let inputCopy:WorkflowInputRecord = {\n      uuid: input.uuid,\n      enabled: input.enabled,\n      tables: input.tables,\n      tableSelection: input.tableSelection,\n    }\n    this.setState({\n      input: inputCopy,\n      editInputDialog:true\n    });\n  }\n\n  handleInputChanges(event:any, input:WorkflowInputRecord) {\n    const state:any = this.state;\n    const findInput = state.inputs.find((i:WorkflowInputRecord) => {\n      return (i.uuid === input.uuid)\n    });\n    if (!findInput) {\n      state.inputs.push(input);\n    }\n    state.inputs = state.inputs.map((i:any) => {\n      if (i.uuid === input.uuid) {\n        i[event.target.name] = (event.target.name === \"enabled\") ? event.target.checked : event.target.value;\n        state.input[event.target.name] = i[event.target.name];\n      }\n      return i;\n    })\n    this.setState(state);\n  }\n\n  selectInputSource(event:any) {\n    const state:any = this.state;\n    const agentInput = this.props.agentInputs.find((input:AgentInputRecord) => {\n      return (input.uuid === event.target.value)\n    })\n    if (agentInput) {\n      state.inputs = [{\n        uuid: event.target.value,\n        enabled: true,\n        inputName: agentInput.inputName,\n        tables: [],\n      }]\n      this.setState(state);\n    }\n  }\n\n  handleAddTable(event:any, idx:number, field:string) {\n    const state:IState = this.state;\n    if (field === \"schema\") {\n      state.input.tables[idx] = event.target.value + \".\" + state.input.tables[idx].split('.')[1];\n    }\n    else if (field === \"table\") {\n      state.input.tables[idx] = state.input.tables[idx].split('.')[0] + \".\" + event.target.value;\n    }\n    this.setState({\n      input: state.input\n    });\n  }\n\n  triggerAddTable() {\n    const state:IState = this.state;\n    state.errors.addTable = false;\n\n    if (!state.addTable) {\n      return;\n    }\n    else if (!this.legalName(this.state.addTable)) {\n      state.errors.addTable = true;\n      this.setState({\n        errors: state.errors\n      })\n      return;\n    }\n    const input = this.state.input;\n    if (!input.tables) {\n      input.tables = [];\n    }\n    input.tables.push(this.state.addTable);\n\n    this.setState({\n      errors: state.errors,\n      input:input,\n      addTable:\"\",\n    })\n  }\n\n  legalName(name:string) {\n    // skip if no name is provided\n    if (!name) { return true; }\n    return (name.match(/^[a-zA-Z_][a-zA-Z0-9_]{1,30}$/)) ? true : false;\n  }\n\n  deleteWorkflow(input:WorkflowInputRecord) {\n    const state:IState = this.state;\n    state.inputs = state.inputs.filter((i:WorkflowInputRecord) => {\n      return (i.uuid === input.uuid) ? false : true\n    });\n\n    const missingInput = this.missingInput();\n\n    this.setState({\n      transformExpanded: (missingInput) ? false : true,\n      outputExpanded: (missingInput) ? false : true,\n      inputs: state.inputs\n    });\n  }\n\n  hideInputDialog() {\n    this.setState({\n      editInputDialog:false\n    })\n  }\n\n  deleteDatabaseTable(table:string) {\n    const input = this.state.input;\n    if (!input.tables) {\n      input.tables = [];\n    }\n    input.tables = input.tables.filter((t) => {\n      return (table === t) ? false : true\n    });\n\n    this.setState({\n      input:input\n    })\n  }\n\n  handleEditWorkflowSnackbarClose = () => {\n    this.setState({\n      showSnackbarEdit: false,\n    });\n  };\n\n\n  saveInputChanges() {\n    const state:IState = this.state;\n    let inputs:WorkflowInputRecord[] = this.state.inputs;\n\n    if (!state.input.tables) {\n      state.input.tables = [];\n    }\n\n    state.errors.JSX = null;\n\n    // find and update existing input in inputs listing\n    inputs = inputs.map((input) => {\n      if (!input.tables) {\n        input.tables = [];\n      }\n\n      if (input.uuid === this.state.input.uuid) {\n        // check for valid table selection\n        input.tables.forEach((t:string) => {\n          let tableArr = t.split('.');\n          let schema = tableArr[0];\n          let table = tableArr[1];\n          if (!schema) {\n            state.errors.JSX = (\n              <Alert mb={4} severity=\"error\">A table selection is missing a schema</Alert>\n            )\n          }\n          else if (!table) {\n            state.errors.JSX = (\n              <Alert mb={4} severity=\"error\">A table selection is missing a table</Alert>\n            )\n          }\n        });\n\n        // transfer current input into inputs array\n        return this.state.input;\n      }\n\n      return input;\n    });\n\n    state.numMaskingRules = state.maskingRuleValues.length;\n\n    //console.log(\"INPUTS\", inputs);\n    //console.log(\"STATE\", state)\n\n    if (state.errors.JSX) {\n      this.setState({\n        errors: state.errors\n      })\n      return;\n    }\n\n    if (state.input.uuid.match(/^new/)) {\n      this.setState({\n        tableOutputOptions: state.tableOutputOptions,\n        errors: state.errors,\n        inputs: inputs,\n        editInputDialog: false,\n        showSnackbarEdit: true,\n        newInputKey: state.newInputKey,\n      })\n    }\n    else {\n      this.setState({\n        maskingRuleValues: state.maskingRuleValues,\n        numMaskingRules: state.numMaskingRules,\n        errors: state.errors,\n        inputs: inputs,\n        editInputDialog: false,\n        showSnackbarEdit: true,\n      })\n    }\n  }\n\n  legalBucketName(bucket:string) {\n    if (!bucket.match(/^[a-zA-Z0-9]{1}[a-zA-Z0-9.-]{1,61}[a-zA-Z0-9]{1}$/)) {\n      return false;\n    }\n    else if (bucket.match(/^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$/)) {\n      // IP address\n      return false;\n    }\n    else if (bucket.match(/^xn--/) || bucket.match(/-s3alias$/)) {\n      return false;\n    }\n    return true;\n  }\n\n  saveDataFeedChanges() {\n    const state:IState = this.state;\n    var errorsFound:boolean = false;\n    var dataFeeds:DataFeed[] = this.state.dataFeeds;\n\n    if (!state.dataFeed.dataFeed) {\n      // no selection, close dialog\n      this.setState({\n        editDataFeed: false,\n      })\n      return; \n    }\n\n    switch (state.dataFeed.dataFeed) {\n      case 's3upload':\n        if (!state.dataFeed.dataFeedConfig.S3UploadBucket || !this.legalBucketName(state.dataFeed.dataFeedConfig.S3UploadBucket)) {\n          state.errors.invalidBucketName = true;\n          errorsFound = true;\n        }\n        else {\n          state.errors.invalidBucketName = false;\n        }\n      break;\n\n      case 'digitalTwin':\n        if (state.dataFeed.dataFeedConfig.enableDeltaUpdates && !state.dataFeed.dataFeedConfig.deltaUpdateField) {\n          state.errors.invalidDeltaUpdateField = true;\n          errorsFound = true;\n        }\n        if (state.dataFeed.dataFeedConfig.enablePostUpdatePreparedStatements && state.dataFeed.dataFeedConfig.postUpdateKeyValues.length) {\n          // validate prepared statements\n          const findInvalid = state.dataFeed.dataFeedConfig.postUpdateKeyValues.find((kv:PostUpdateParam) => {\n            //eslint-disable-next-line\n            return (!kv.key || !String(kv.value) || String(kv.key).match(/[%\\(\\)]+/) || String(kv.value).match(/[%\\(\\)]+/)) ? true : false;\n          })\n          if (findInvalid) {\n            state.errors.invalidPostUpdateKeyValues = true;\n            errorsFound = true;\n          }\n          else {\n            state.errors.invalidPostUpdateKeyValues = false;\n          }\n        }\n      break;\n\n      case 'custom':\n        if (!state.dataFeed.dataFeedConfig.image) {\n          state.errors.image = true;\n          errorsFound = true;\n        }\n        if (!state.dataFeed.dataFeedConfig.tag) {\n          state.errors.tag = true;\n          errorsFound = true;\n        }\n        if (!state.dataFeed.dataFeedConfig.shell) {\n          state.errors.shell = true;\n          errorsFound = true;\n        }\n\n        if (this.state.dataFeed.feedSecrets && this.state.dataFeed.feedSecrets.length) {\n          this.state.dataFeed.feedSecrets.forEach((s: CustomSecret) => {\n            if (s.secretType === 'volume' && (!s.secretName || !s.secretKey || !s.secretPath)) {\n              state.errors.invalidSecret = true;\n              errorsFound = true;\n            } else if (s.secretType === 'env' && (!s.secretName || !s.secretKey || !s.envName)) {\n              state.errors.invalidSecret = true;\n              errorsFound = true;\n            }\n          });\n        }\n\n      break;\n\n      default:\n      break;\n    }\n\n    if (errorsFound) {\n      this.setState({\n        errors: state.errors,\n      })\n      return;\n    }\n\n    if (state.dataFeed.uuid === \"new\") {\n      state.newDataFeedKey++;\n      state.dataFeed.uuid = \"new\" + state.newDataFeedKey;\n\n      dataFeeds.push(state.dataFeed);\n    }\n    else {\n      // update existing datafeed\n      dataFeeds = dataFeeds.map((df:DataFeed) => {\n        if (df.uuid === state.dataFeed.uuid) {\n          df.dataFeed = state.dataFeed.dataFeed;\n          df.dataFeedConfig = state.dataFeed.dataFeedConfig;\n          df.feedSecrets = state.dataFeed.feedSecrets;\n        }\n        return df;\n      })\n    }\n\n    this.setState({\n      dataFeeds,\n      editDataFeed: false,\n      showSnackbarEdit: true\n    })\n  }\n\n  transformExpansion(event:any, expanded:boolean) {\n    this.setState({\n      transformExpanded: (expanded) ? true : false\n    })\n  }\n\n  outputExpansion(event:any, expanded:boolean) {\n    this.setState({\n      outputExpanded: (expanded) ? true : false\n    })\n  }\n\n  triggerOutputOptions(event:any, databaseTable:string) {\n    const state:IState = this.state;\n    if (!databaseTable) {\n      state.constraintSchema = \"public\";\n      state.constraintTable = \"\";\n      state.tableOutputOptions = {\n        errors: {},\n        numDays: 30,\n        sampleFields: \"createdAndUpdated\",\n        createdAtField: \"created_at\",\n        updatedAtField: \"updated_at\",\n        disableDeltaUpdates: false,\n      }\n    }\n    else {\n      state.constraintSchema = databaseTable.split('.')[0];\n      state.constraintTable = databaseTable.split('.')[1];\n      state.tableOutputOptions = state.exportTableDataConfig.find((config:any) => {\n        return config.table === databaseTable\n      });\n      state.tableOutputOptions.errors = {};\n    }\n\n    this.setState({\n      currentDatabaseTable: databaseTable,\n      tableOutputOptions: state.tableOutputOptions,\n      constraintSchema: state.constraintSchema,\n      constraintTable: state.constraintTable,\n      showOutputOptions: true\n    })\n  }\n\n  deleteConstraint(event:any, databaseTable:string) {\n    const state:IState = this.state;\n    state.exportTableDataConfig = state.exportTableDataConfig.filter((config:any) => {\n      return (config.table !== databaseTable);\n    });\n    this.setState({\n      exportTableDataConfig: state.exportTableDataConfig\n    })\n  }\n\n  genConstraintSummary(table:string) {\n    let display:string = \"\";\n    let scheme:string = \"\";\n    let findConfig = this.state.exportTableDataConfig.find((config:any) => {\n      return config.table === table;\n    });\n    if (findConfig) {\n      switch (findConfig.sampleFields) {\n        case 'createdAndUpdated':\n        scheme = \"rows created and updated\";\n        break;\n\n        case 'created':\n        scheme = \"rows created\";\n        break;\n\n        case 'updated':\n        scheme = \"rows updated\";\n        break;\n      }\n      display = scheme + \" in the last \" + findConfig.numDays + \" days\";\n    }\n    return display;\n  }\n\n  hideOutputOptions() {\n    const state:IState = this.state;\n    if (!state.currentDatabaseTable && this.state.constraintSchema && this.state.constraintTable) {\n      // new constraint\n      state.tableOutputOptions.table = this.state.constraintSchema + \".\" + this.state.constraintTable;\n      state.exportTableDataConfig.push(state.tableOutputOptions);\n    }\n    else if (this.state.constraintSchema && this.state.constraintTable) {\n      // update existing\n      state.exportTableDataConfig = state.exportTableDataConfig.map((config:any) => {\n        if (config.table === state.currentDatabaseTable) {\n          state.tableOutputOptions.table = this.state.constraintSchema + \".\" + this.state.constraintTable;\n          return state.tableOutputOptions;\n        }\n        return config;\n      });\n    }\n\n    //console.log(\"FINAL\", state.exportTableDataConfig);\n\n    this.setState({\n      showOutputOptions: false,\n      exportTableDataConfig: state.exportTableDataConfig,\n    })\n  }\n\n  resetDataFeedErrors() {\n    const state:IState = this.state;\n    state.errors.duplicateDataFeed = false;\n    state.errors.invalidBucketName = false;\n    state.errors.invalidPostUpdateKeyValues = false;\n    state.errors.invalidSecret = false;\n\n    this.setState({\n      errors: state.errors\n    })\n  }\n\n  addDataFeed() {\n    this.resetDataFeedErrors();\n    const state:IState = this.state;\n\n    state.dataFeed.uuid = \"new\";\n    state.dataFeed.dataFeed = \"\";\n    state.dataFeed.feedSecrets = [];\n\n    this.setState({\n      editDataFeed: true,\n      dataFeed: state.dataFeed\n    })\n  }\n\n  triggerEditDataFeed(df:DataFeed) {\n    this.resetDataFeedErrors();\n    const state:IState = this.state;\n\n    const dataFeed = this.state.dataFeeds.filter((d:DataFeed) => {\n      return (d.uuid === df.uuid) ? true : false;\n    })\n\n    // remove S3 prefix\n    if (dataFeed[0].dataFeed === \"s3upload\") {\n      dataFeed[0].dataFeedConfig.S3UploadBucket = dataFeed[0].dataFeedConfig.S3UploadBucket.replace(/^s3:\\/\\//,'');\n    }\n    if (!dataFeed[0].dataFeedConfig.postUpdateKeyValues) {\n      dataFeed[0].dataFeedConfig.postUpdateKeyValues = [];\n    }\n\n    // dereference\n    const dataFeedCopy:DataFeed = {\n      uuid: dataFeed[0].uuid,\n      dataFeed: dataFeed[0].dataFeed,\n      dataFeedConfig: dataFeed[0].dataFeedConfig,\n      feedSecrets: dataFeed[0].feedSecrets,\n    }\n\n    this.setState({\n      editDataFeed: true,\n      dataFeed: dataFeedCopy,\n      errors: state.errors,\n    })\n  }\n\n  hideDataFeed() {\n    this.setState({\n      editDataFeed: false\n    })\n  }\n\n  handleDataFeed(dataFeed:string) {\n    const state:IState = this.state;\n\n    // prevent creation of duplicate data feed\n    if (state.dataFeeds && state.dataFeeds.find((df:DataFeed) => {\n      return (df.dataFeed === dataFeed) ? true : false\n    })) {\n      state.errors.duplicateDataFeed = true;\n      state.dataFeed.dataFeed = \"\";\n      this.setState({\n        errors: state.errors,\n        dataFeed: state.dataFeed,\n      });\n      return;\n    }\n\n    state.dataFeed.dataFeed = dataFeed;\n    state.errors.duplicateDataFeed = false;\n\n    // init config\n    switch (dataFeed) {\n      case 'digitalTwin':\n      state.dataFeed.dataFeedConfig = {\n        inputSource: \"\",\n        enableSSL: false,\n        enableDeltaUpdates: false,\n        enablePostUpdatePreparedStatements: false,\n        postUpdateKeyValues: [],\n      }\n      break;\n\n      case 's3upload':\n      state.dataFeed.dataFeedConfig = {\n        postUpdateKeyValues: [],\n      }\n      break;\n\n      case 'custom':\n      state.dataFeed.dataFeedConfig = {\n        image: \"\",\n        tag: \"\",\n        shell: \"\",\n        command: \"\",\n        postUpdateKeyValues: [],\n      }\n      break;\n    }\n    \n    this.setState({\n      dataFeed: state.dataFeed,\n      errors: state.errors,\n    })\n  }\n\n  handleDataFeedBack() {\n    const state:IState = this.state;\n\n    state.dataFeed.dataFeed = \"\";\n    this.setState({\n      dataFeed: state.dataFeed\n    })\n  }\n\n  handleDataFeedCancel() {\n    this.setState({\n      editDataFeed: false\n    })\n  }\n\n  addParameterValue() {\n    const state:IState = this.state;\n    state.dataFeed.dataFeedConfig.postUpdateKeyValues.push({\n      key: \"\",\n      value: \"\"\n    })\n    this.setState(state);\n  }\n\n  updateParameterValue(key:number, event:any) {\n    const state:IState = this.state;\n    state.dataFeed.dataFeedConfig.postUpdateKeyValues = state.dataFeed.dataFeedConfig.postUpdateKeyValues.map((kv:PostUpdateParam, idx:number) => {\n      if (idx === key && event.target.name === \"parameterKey\") {\n        kv.key = event.target.value;\n      }\n      else if (idx === key && event.target.name === \"parameterValue\") {\n        kv.value = (!event.target.value || isNaN(event.target.value)) ? event.target.value : parseFloat(event.target.value);\n      }\n      return kv;\n    })\n    this.setState(state); \n  }\n\n  deleteParameterValue(key:number) {\n    const state:IState = this.state;\n    state.dataFeed.dataFeedConfig.postUpdateKeyValues = state.dataFeed.dataFeedConfig.postUpdateKeyValues.filter((kv:PostUpdateParam, idx:number) => {\n      return (idx === key) ? false : true;\n    });\n    this.setState(state);\n  }\n\n  deleteDataFeed(dataFeed:DataFeed) {\n    const state:IState = this.state;\n    state.dataFeeds = state.dataFeeds.filter((df:DataFeed) => {\n      return (df.uuid === dataFeed.uuid) ? false : true;\n    })\n\n    this.setState({\n      dataFeeds: state.dataFeeds,\n      showSnackbarEdit: true\n    })\n  }\n\n  handleDataFeedOptions(event:any) {\n    const state:IState = this.state;\n    state.dataFeed.dataFeedConfig[event.target.name] = (event.target.name.match(/^enable/)) ? event.target.checked : event.target.value;\n\n    this.setState(state);\n  }\n\n  displayWorkflowType(wf:string) {\n    switch (wf) {\n      case 'ERL':\n      return 'ERL (Extract, Redact, Load)';\n\n      case 'mockDatabaseMigration':\n      return 'Database Clone for Migration Dry-run';\n\n      default:\n      break;\n    }\n  }\n\n  /* eslint-disable max-len */\n\n  render() {\n    return (\n      <Card mb={6}>\n        <CardContent>\n          {this.dbUUIDSnackbar()}\n          <Typography variant=\"h4\">\n            {this.props.workflow.name} <code>({this.props.workflow.uuid})</code>\n            <Box display=\"inline\" ml={2}>\n              <CopyToClipboard text={this.props.workflow.uuid} onCopy={() => this.clipboardCopy(\"dbuuid\")}>\n                <Button variant=\"outlined\" size=\"small\" color=\"secondary\"><ClipboardIcon /></Button>\n              </CopyToClipboard>\n            </Box>\n          </Typography>\n\n          <Box>\n            <Grid\n              container\n              justify=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Grid item xs={4}>\n                <Box display={(this.props.workflow.workflowType.match(/^(ERL|mockDatabaseMigration)/)) ? 'block' : 'none'}>\n                  <FormControl margin=\"dense\" fullWidth>\n                    <InputLabel>\n                      Redactics Agent\n                    </InputLabel>\n                    <Select\n                      value={this.props.workflow.agentId}\n                      name=\"agentId\"\n                      onChange={(event) => this.props.handleWFChanges(event, this.props.workflow.uuid)}\n                    >\n                      {this.props.agents.map((agent:AgentRecord) => (\n                        <MenuItem key={agent.uuid} value={agent.uuid}>{agent.name}</MenuItem>\n                      ))}\n                    </Select>\n                  </FormControl>\n                </Box>\n                <Box mt={4}>\n                  Workflow Type: <b>{this.displayWorkflowType(this.props.workflow.workflowType)}</b>\n                </Box>\n              </Grid>\n            </Grid>\n          </Box>\n\n          <Dialog\n            open={this.state.showLastReportedError}\n            onClose={this.hideLastReportedError}\n            maxWidth=\"lg\"\n            aria-labelledby=\"dialog-title\"\n            aria-describedby=\"dialog-description\"\n          >\n            <DialogTitle id=\"dialog-title\">Last Reported Error for: {this.props.workflow.name}</DialogTitle>\n            <DialogContent>\n              <DialogContentText id=\"dialog-description\">\n                {this.displayLastReportedError()}\n              </DialogContentText>\n\n              <DialogActions>\n                <Button color=\"primary\" onClick={this.hideLastReportedError}>\n                  Close\n                </Button>\n              </DialogActions>\n            </DialogContent>\n          </Dialog>\n\n          <Box mt={12}>\n            <Paper variant=\"outlined\">\n              <ExpansionPanel>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                  <Typography>Input Settings</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  <WorkflowInputs\n                    errors={this.state.errors}\n                    workflow={this.props.workflow}\n                    agentInputs={this.props.agentInputs}\n                    agents={this.props.agents}\n                    input={this.state.input}\n                    inputs={this.state.inputs}\n                    saveInputChanges={this.saveInputChanges}\n                    selectInputSource={this.selectInputSource}\n                    editInputDialog={this.state.editInputDialog}\n                    triggerEditInputDialog={this.triggerEditInputDialog}\n                    handleInputChanges={this.handleInputChanges}\n                    handleAddTable={this.handleAddTable}\n                    addTable={this.state.addTable}\n                    triggerAddTable={this.triggerAddTable}\n                    hideInputDialog={this.hideInputDialog}\n                    deleteDatabaseTable={this.deleteDatabaseTable}\n                    handleSnackbarClose={this.handleEditWorkflowSnackbarClose}\n                    addTableSelection={this.addTableSelection}\n                    deleteTableSelection={this.deleteTableSelection}\n                  />\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n            </Paper>\n          </Box>\n                  \n\n          <Box mt={4} display={(this.props.workflow.workflowType.match(/^ERL/)) ? 'block' : 'none'}>\n            <Paper variant=\"outlined\">\n              <ExpansionPanel disabled={this.missingInput()} expanded={!this.missingInput() && this.state.transformExpanded} onChange={(event, expanded) => this.transformExpansion(event, expanded)}>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                  <Typography>Processing/Transformation Settings</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  <WorkflowRedactionRules\n                    workflow={this.props.workflow}\n                    allDatabaseTables={this.state.allDatabaseTables}\n                    maskingRuleValues={this.state.maskingRuleValues}\n                    handleRuleChange={this.handleRuleChange}\n                    deleteMaskingRule={this.deleteMaskingRule}\n                    numMaskingRules={this.state.numMaskingRules}\n                    maskingRules={this.state.maskingRules}\n                    addMaskingRule={this.addMaskingRule}\n                  />\n\n                  <WorkflowSchedule\n                    handleExportSchedule={this.handleExportSchedule}\n                    exportSchedule={this.state.exportSchedule}\n                    schedule={this.state.schedule || '* 0 * * *'}\n                    handleSchedule={this.handleSchedule}\n                    scheduleSelection={this.state.scheduleSelection}\n                    customSchedule={this.state.customSchedule}\n                    workflowType={this.props.workflow.workflowType}\n                    errors={this.state.errors}\n                  />\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n            </Paper>\n          </Box>\n\n          <Box mt={4} display={(this.props.workflow.workflowType.match(/^ERL/)) ? 'block' : 'none'}>\n            <Paper variant=\"outlined\">\n              <ExpansionPanel disabled={(this.state.allDatabaseTables && this.state.allDatabaseTables.length) ? false : true} expanded={this.state.outputExpanded} onChange={(event, expanded) => this.outputExpansion(event, expanded)}>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                  <Typography>Output Settings</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  <WorkflowExport\n                    exportTableDataConfig={this.state.exportTableDataConfig}\n                    showOutputOptions={this.state.showOutputOptions}\n                    hideOutputOptions={this.hideOutputOptions}\n                    triggerOutputOptions={this.triggerOutputOptions}\n                    deleteConstraint={this.deleteConstraint}\n                    currentDatabaseTable={this.state.currentDatabaseTable}\n                    allDatabaseTables={this.state.allDatabaseTables}\n                    tableOutputOptions={this.state.tableOutputOptions}\n                    constraintSchema={this.state.constraintSchema}\n                    constraintTable={this.state.constraintTable}\n                    handleTableOutputChanges={this.handleTableOutputChanges}\n                    genConstraintSummary={this.genConstraintSummary}\n                  />\n\n                  <WorkflowPostExport\n                    inputs={this.state.inputs}\n                    dataFeeds={this.state.dataFeeds}\n                    dataFeed={this.state.dataFeed}\n                    addParameterValue={this.addParameterValue}\n                    updateParameterValue={this.updateParameterValue}\n                    deleteParameterValue={this.deleteParameterValue}\n                    agents={this.props.agents}\n                    workflow={this.props.workflow}\n                    hideDataFeed={this.hideDataFeed}\n                    addDataFeed={this.addDataFeed}\n                    editDataFeed={this.state.editDataFeed}\n                    handleDataFeed={this.handleDataFeed}\n                    handleDataFeedBack={this.handleDataFeedBack}\n                    handleDataFeedCancel={this.handleDataFeedCancel}\n                    handleDataFeedOptions={this.handleDataFeedOptions}\n                    saveDataFeedChanges={this.saveDataFeedChanges}\n                    triggerEditDataFeed={this.triggerEditDataFeed}\n                    deleteDataFeed={this.deleteDataFeed}\n                    errors={this.state.errors}\n                    handleCustomSecret={this.handleCustomSecret}\n                    addSecret={this.addSecret}\n                    handleDeleteSecret={this.handleDeleteSecret}\n                    agentNamespace={this.state.agentNamespace}\n                  />\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n            </Paper>\n          </Box>\n\n          <Box mt={4} display={(this.props.workflow.workflowType === \"mockDatabaseMigration\") ? 'block' : 'none'}>\n            <Paper variant=\"outlined\">\n              <ExpansionPanel expanded={this.state.outputExpanded} onChange={(event, expanded) => this.outputExpansion(event, expanded)}>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                  <Typography>Settings and Setup Instructions</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  <DatabaseMigrationSetup\n                    workflow={this.props.workflow}\n                    handleWFChanges={this.props.handleWFChanges}\n                    inputs={this.state.inputs}\n                    agentNamespace={this.state.agentNamespace || \"default\"}\n                    clipboardCopy={this.clipboardCopy}\n                  />\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n            </Paper>\n          </Box>\n\n          <Grid\n            container\n            justify=\"space-between\"\n            alignItems=\"center\"\n            mt={12}\n          >\n            <Grid item xs={10}>\n              <Button variant=\"contained\" color=\"primary\" size=\"large\" disabled={this.state.saveButtonDisabled} onClick={() => this.saveChanges(this.props.workflow.uuid)}>\n                <SaveIcon />&nbsp;Save Changes\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button variant=\"contained\" color=\"default\" size=\"small\" onClick={this.deleteWorkflowConfirmation}>\n                <DeleteIcon />&nbsp;\n                Delete Workflow\n              </Button>\n            </Grid>\n\n            <Dialog\n              open={this.state.deleteWorkflowConfirmation}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Delete Workflow</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  Are you sure you want to delete this workflow configuration?\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button onClick={this.cancelWorkflowConfirmation}>\n                    Cancel\n                  </Button>\n                  <Button color=\"primary\" onClick={() => this.props.deleteWorkflow(this.props.workflow.uuid)}>\n                    Yes, delete\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.orphanedWorkflow}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  Workflow <b>{this.props.workflow.name}</b> is not associated with a Redactics Agent. Please correct this by selecting an agent in your workflow configuration.\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={!this.state.completeRedactRules}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  One or more of your redaction rules contains a blank value or invalid column name (field names must contain only letters, numbers and underscores and most start with a letter or underscore)\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.dupeRedactRuleFound}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  One or more of your redaction rules contains a duplicate table and column name\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.dupeTableExportFound}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  You&apos;ve already selected this table/column for export\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.missingSchemaSelection}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  You must provide some table names for schema export\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.missingPostExportHookField}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  You must provide valid custom data feed container info\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.missingSecretField}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  You must provide details about your secrets/environment variables\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.invalidOutputSettingField}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  One or more \"created\" or \"updated\" field settings are missing or contain illegal characters\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.invalidForgetUserFields}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  Your Forget User Request \"Database and Table Name\" or \"Email Field\" are either missing or contain an invalid field name (field names must contain only letters, numbers and underscores and most start with a letter or underscore).\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.invalidMigrationFields}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  Your Setup Instructions fields are missing one or more values.\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={!this.state.validSchedule}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  <p>\n                    Your custom schedule is invalid. Please abide by the standard crontab format:\n                  </p>\n\n                  <p>\n                    <b>\n                      [minute](0-59)[hour](0-23)\n                      [day of the month](1-31)\n                      [month](1-12)\n                      [day of the week](0-6)\n                    </b>\n                  </p>\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.mockMigrationDatabase}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  <p>\n                    Your database and cloned database name cannot be identical.\n                  </p>\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.invalidDigitalTwinOutput}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  <p>\n                    You cannot designate a Digital Twin output that is also configured as an input source.\n                  </p>\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={!this.state.validName}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  You must provide a workflow name\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={!this.state.validDiskSize}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Error</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  You must provide a disk space allocation for your input source\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button color=\"primary\" onClick={this.hideErrorDialog}>\n                    Okay\n                  </Button>\n                </DialogActions>\n              </DialogContent>\n            </Dialog>\n\n            <Dialog\n              open={this.state.showDialog}\n              aria-labelledby=\"dialog-title\"\n              aria-describedby=\"dialog-description\"\n            >\n              <DialogTitle id=\"dialog-title\">Your changes have been saved!</DialogTitle>\n              <DialogContent>\n                <DialogContentText id=\"dialog-description\">\n                  <Box>\n                    However, your workflow will not work until you update your Helm configuration file,&nbsp;\n                    which can be found in the <b>Agents</b> section.\n                  </Box>\n                </DialogContentText>\n\n                <DialogActions>\n                  <Button onClick={this.hideHelmReminder} color=\"primary\" autoFocus>\n                    Okay\n                  </Button>\n                </DialogActions>\n\n              </DialogContent>\n            </Dialog>\n\n            <Snackbar\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              open={this.state.showSnackbar}\n              autoHideDuration={8000}\n              onClose={this.handleSnackbarClose}\n              ContentProps={{\n                'aria-describedby': 'message-id',\n              }}\n              message={<span id=\"message-id\"><b>Your changes have been saved!</b></span>}\n              action={[\n                <IconButton\n                  key=\"close\"\n                  aria-label=\"Close\"\n                  color=\"inherit\"\n                  onClick={this.handleSnackbarClose}\n                >\n                  <CloseIcon />\n                </IconButton>,\n              ]}\n            />\n\n            <Snackbar\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              open={this.state.showSnackbarEdit}\n              autoHideDuration={8000}\n              onClose={this.handleSnackbarClose}\n              ContentProps={{\n                'aria-describedby': 'message-id',\n              }}\n              message={<span id=\"message-id\">Click on &quot;Save Changes&quot; at the bottom of this section to save your changes...</span>}\n              action={[\n                <IconButton\n                  key=\"close\"\n                  aria-label=\"Close\"\n                  color=\"inherit\"\n                  onClick={this.handleSnackbarClose}\n                >\n                  <CloseIcon />\n                </IconButton>\n              ]}\n            />\n          </Grid>\n\n        </CardContent>\n      </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(Workflow);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport Helmet from 'react-helmet';\n\n// import { red, green, blue } from \"@material-ui/core/colors\";\n\nimport {\n  Divider as MuiDivider,\n  FormControl as MuiFormControl,\n  Grid as MuiGrid,\n  Typography,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  ExpansionPanel,\n  ExpansionPanelDetails,\n  ExpansionPanelSummary,\n  TextField as MuiTextField,\n  Button as MuiButton,\n  InputLabel,\n  Select as MuiSelect,\n  MenuItem,\n  Box,\n  InputAdornment,\n  Tooltip,\n} from '@material-ui/core';\n\nimport {\n  Add as AddIcon,\n  ExpandMore as ExpandMoreIcon,\n  FormatListBulleted as FormatListBulletedIcon,\n  HelpOutline as HelpIcon,\n} from '@material-ui/icons';\n\nimport {\n  Save as SaveIcon,\n} from 'react-feather';\n\nimport { spacing } from '@material-ui/system';\nimport {\n  WorkflowRecord, AgentInputRecord, InputRecord, AgentRecord, RedactRuleSet, RedactRulePreset,\n} from '../../types/redactics';\nimport RedacticsContext from '../../contexts/RedacticsContext';\n\nimport Workflow from './Workflow';\n\nconst Divider = styled(MuiDivider)(spacing);\n\nconst FormControlSpacing = styled(MuiFormControl)(spacing);\n\nconst FormControl = styled(FormControlSpacing)`\n  min-width: 400px;\n  max-width: 400px;\n`;\n\nconst Grid = styled(MuiGrid)(spacing);\n\nconst TextFieldSpacing = styled(MuiTextField)(spacing);\n\nconst TextField = styled(TextFieldSpacing)`\n  width: 400px;\n`;\n\nconst Select = styled(MuiSelect)(spacing);\n\nconst Button = styled(MuiButton)(spacing);\n\nconst styles = {\n  selectAdornment: {\n    marginRight: '-30px',\n  },\n};\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\ninterface IProps {\n  classes: any;\n}\n\ninterface IState {\n  saveButtonDisabled: boolean;\n  ruleLegendDialog: boolean;\n  newWorkflowDialog: boolean;\n  workflows: WorkflowRecord[];\n  agentInputs: AgentInputRecord[];\n  allOutputs: InputRecord[];\n  presets: RedactRulePreset[];\n  redactrulesets: RedactRuleSet[];\n  agents: AgentRecord[];\n  newWorkflowName: string;\n  newWorkflowAgent: string;\n  newWorkflowType: string;\n  dbLimitError: boolean;\n  // dialog toggles\n  deleteWorkflowConfirmation: boolean;\n}\n\nclass Workflows extends React.Component<IProps, IState> {\n  static contextType = RedacticsContext;\n\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      saveButtonDisabled: true,\n      ruleLegendDialog: false,\n      newWorkflowDialog: false,\n      workflows: [],\n      agentInputs: [],\n      allOutputs: [],\n      presets: [],\n      redactrulesets: [],\n      agents: [],\n      newWorkflowName: '',\n      newWorkflowAgent: '',\n      newWorkflowType: '',\n      dbLimitError: false,\n      deleteWorkflowConfirmation: false,\n    };\n\n    this.handleChangeAdd = this.handleChangeAdd.bind(this);\n    this.handleWFChanges = this.handleWFChanges.bind(this);\n    this.addWorkflow = this.addWorkflow.bind(this);\n    this.ruleLegendOpen = this.ruleLegendOpen.bind(this);\n    this.ruleLegendClose = this.ruleLegendClose.bind(this);\n    this.newWorkflowOpen = this.newWorkflowOpen.bind(this);\n    this.newWorkflowClose = this.newWorkflowClose.bind(this);\n    this.refreshWorkflows = this.refreshWorkflows.bind(this);\n    this.deleteWorkflow = this.deleteWorkflow.bind(this);\n    this.dbLimitErrorClose = this.dbLimitErrorClose.bind(this);\n  }\n\n  async refreshWorkflows() {\n    try {\n      const response = await fetch(`${this.context.apiUrl}/workflow`);\n\n      const data = await response.json();\n\n      data.workflows.map((workflow:any) => {\n        // set some defaults\n        workflow.migrationNamespace = workflow.migrationNamespace || \"default\";\n        workflow.migrationDatabaseClone = workflow.migrationDatabaseClone || \"redactics_clone\";\n\n        return workflow;\n      });\n\n      this.setState({\n        workflows: data.workflows,\n        agentInputs: data.agentInputs,\n        allOutputs: data.allOutputs,\n        presets: data.presets,\n        redactrulesets: data.redactrulesets,\n        agents: data.agents,\n      });\n    } catch (err) {\n      // console.log('CATCH ERR', error);\n    }\n  }\n\n  componentDidMount() {\n    this.refreshWorkflows();\n  }\n\n  handleChangeAdd(event:any) {\n    const state:IState = this.state;\n\n    switch (event.target.name) {\n      case 'name':\n        state.newWorkflowName = event.target.value;\n        state.saveButtonDisabled = (state.newWorkflowType === \"ERL\")\n          ? !(event.target.value && state.newWorkflowAgent)\n          : !(event.target.value && state.newWorkflowType);\n        this.setState(state);\n        break;\n\n      case 'agentId':\n        state.newWorkflowAgent = event.target.value;\n        state.saveButtonDisabled = !(state.newWorkflowName);\n        this.setState(state);\n        break;\n\n      case 'workflowType':\n        state.newWorkflowType = event.target.value;\n        state.saveButtonDisabled = (event.target.value === \"ERL\")\n        ? !(state.newWorkflowName && state.newWorkflowAgent)\n        : !(state.newWorkflowName && state.newWorkflowType);\n        this.setState(state);\n        break;\n\n      default:\n    }\n  }\n\n  async addWorkflow() {\n    this.setState({\n      saveButtonDisabled: true,\n    });\n\n    try {\n      const response = await fetch(`${this.context.apiUrl}/workflow`, {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: this.state.newWorkflowName,\n          agentId: this.state.newWorkflowAgent,\n          workflowType: this.state.newWorkflowType,\n        }),\n      });\n\n      await response.json();\n      this.refreshWorkflows();\n\n      this.setState({\n        newWorkflowDialog: false,\n        newWorkflowName: '',\n        newWorkflowAgent: '',\n      });\n    } catch (err) {\n      // console.log('CATCH ERR', error);\n    }\n  }\n\n  async deleteWorkflow(workflowId:string) {\n    try {\n      await fetch(`${this.context.apiUrl}/workflow/${workflowId}`, {\n        method: 'delete',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      this.refreshWorkflows();\n\n      this.setState({\n        deleteWorkflowConfirmation: false,\n      });\n    } catch (err) {\n      this.setState({\n        deleteWorkflowConfirmation: false,\n      });\n    }\n  }\n\n  newWorkflowOpen() {\n    this.setState({\n      newWorkflowDialog: true,\n    });\n  }\n\n  newWorkflowClose() {\n    this.setState({\n      newWorkflowDialog: false,\n    });\n  }\n\n  dbLimitErrorClose() {\n    this.setState({\n      dbLimitError: false,\n    });\n  }\n\n  ruleLegendOpen() {\n    this.setState({\n      ruleLegendDialog: true,\n    });\n  }\n\n  ruleLegendClose() {\n    this.setState({\n      ruleLegendDialog: false,\n    });\n  }\n\n  handleWFChanges(event:any, workflowId:string) {\n    const workflows = this.state.workflows.map((d:any) => {\n      const workflow = d;\n      if (workflow.uuid === workflowId) {\n        workflow[event.target.name] = event.target.value;\n      }\n\n      return workflow;\n    });\n\n    this.setState({\n      workflows,\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Helmet title=\"Workflow Configurations\" />\n\n        <Grid\n          justify=\"space-between\"\n          container\n          spacing={10}\n        >\n          <Grid item xs={4} mb={6}>\n            <Typography variant=\"h1\" gutterBottom display=\"inline\">\n              Workflow Configurations\n            </Typography>\n          </Grid>\n        </Grid>\n\n        <Divider my={6} />\n\n        <Box mt={4}>\n          <Typography variant=\"body1\" gutterBottom>\n            Build and maintain your data management workflows here. Configuration changes will be picked up by your installed Agent usually within a few minutes.\n          </Typography>\n        </Box>\n\n        <Grid\n          justify=\"space-between\"\n          container\n          spacing={10}\n          mt={8}\n        >\n          <Grid item></Grid>\n          <Grid item mb={6}>\n            <div>\n              <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.ruleLegendOpen}>\n                <FormatListBulletedIcon />&nbsp;\n                PII Ruleset Legend\n              </Button>&nbsp;\n              <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={this.newWorkflowOpen}>\n                <AddIcon />&nbsp;\n                Define New Workflow\n              </Button>\n            </div>\n          </Grid>\n        </Grid>\n\n        <Dialog\n          open={this.state.ruleLegendDialog}\n          onClose={this.ruleLegendClose}\n          aria-labelledby=\"legend-title\"\n          aria-describedby=\"legend-description\"\n        >\n          <DialogTitle id=\"legend-title\">PII Ruleset Legend</DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"legend-description\">\n              <ExpansionPanel>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                  <Typography>Redact Email</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  <Typography>\n                    Transform emails to unique email address derived from the row&apos;s primary\n                    key, constructed based on provided prefix and domain - i.e.\n                    <code>[prefix][primarykey]@[domain]</code>\n                  </Typography>\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n\n              <ExpansionPanel>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                  <Typography>Destruction</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  <Typography>\n                    Replace data with a null value\n                  </Typography>\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n\n              <ExpansionPanel>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                  <Typography>Replacement</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  <Typography>\n                    Replace data with a provided value\n                  </Typography>\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n\n              <ExpansionPanel>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                  <Typography>Random String</Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails>\n                  <Typography>\n                    Replace data with a random alphanumeric string of a provided length\n                  </Typography>\n                </ExpansionPanelDetails>\n              </ExpansionPanel>\n            </DialogContentText>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog\n          open={this.state.newWorkflowDialog}\n          onClose={this.newWorkflowClose}\n          aria-labelledby=\"dialog-title\"\n          aria-describedby=\"dialog-description\"\n        >\n          <DialogTitle id=\"dialog-title\">Add Workflow</DialogTitle>\n          <DialogContent>\n            <form noValidate autoComplete=\"off\">\n              <Box>\n                Create a name for this workflow, and assign a Redactics Agent to carry out the work defined by this workflow.\n              </Box>\n\n              <Box mt={4}>\n                <FormControl fullWidth>\n                  <TextField\n                    name=\"name\"\n                    label=\"Workflow Name\"\n                    onChange={this.handleChangeAdd}\n                    value={this.state.newWorkflowName}\n                  />\n                </FormControl>\n              </Box>\n\n              <Box mt={4}>\n                <FormControl margin=\"dense\" fullWidth>\n                  <InputLabel>\n                    Workflow Type\n                  </InputLabel>\n                  <Select\n                    value={this.state.newWorkflowType}\n                    name=\"workflowType\"\n                    onChange={this.handleChangeAdd}\n                    endAdornment={\n                      <InputAdornment className={this.props.classes.selectAdornment} position=\"end\">\n                        <Tooltip title=\"The web-based ERL testing option allows you to test ERL workflows with some preset sample dataset options without having to install the Redactics Agent into your own infrastructure. This option is multi-tenant, but a single-tenant mode is available you can run with your own datasets - contact us for more info.\" placement=\"right-start\"><HelpIcon /></Tooltip>\n                      </InputAdornment>\n                    }\n                  >\n                    <MenuItem key=\"ERL\" value=\"ERL\">ERL (Extract, Redact, Load)</MenuItem>\n                    <MenuItem key=\"mockDatabaseMigration\" value=\"mockDatabaseMigration\">Database Clone for Migration Dry-run</MenuItem>\n                  </Select>\n                </FormControl>\n              </Box>\n\n              <Box mt={4} display={(this.state.newWorkflowType.match(/^(ERL|mockDatabaseMigration)/)) ? 'block' : 'none'}>\n                <FormControl fullWidth>\n                  <InputLabel htmlFor=\"agentId\">Redactics Agent</InputLabel>\n                  <Select\n                    name=\"agentId\"\n                    onChange={this.handleChangeAdd}\n                    value={this.state.newWorkflowAgent}\n                  >\n                    {this.state.agents.map((agent:AgentRecord) => (\n                      <MenuItem key={agent.uuid} value={agent.uuid}>{agent.name}</MenuItem>\n                    ))}\n                  </Select>\n                </FormControl>\n              </Box>\n\n              <Box mt={8}>\n                <DialogActions>\n                  <Button color=\"secondary\" onClick={this.newWorkflowClose}>\n                    Cancel\n                  </Button>\n\n                  <Button color=\"secondary\" variant=\"contained\" disabled={this.state.saveButtonDisabled} onClick={this.addWorkflow}>\n                    Save&nbsp;<SaveIcon />\n                  </Button>\n                </DialogActions>\n              </Box>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        <Dialog\n          open={this.state.dbLimitError}\n          onClose={this.dbLimitErrorClose}\n          aria-labelledby=\"dialog-title\"\n          aria-describedby=\"dialog-description\"\n        >\n          <DialogTitle id=\"dialog-title\">You&apos;ve Reached Your Account Limit</DialogTitle>\n          <DialogContent>\n            <Box>\n              This Redactics account is currently limited to support defining only a single\n              database. Please contact us if you wish to upgrade this account.\n            </Box>\n\n            <DialogActions>\n              <Button color=\"secondary\" onClick={this.dbLimitErrorClose}>\n                Okay\n              </Button>\n            </DialogActions>\n          </DialogContent>\n        </Dialog>\n\n        {this.state.workflows.map((workflow:WorkflowRecord) => <Workflow\n          workflow={workflow}\n          presets={this.state.presets}\n          redactrulesets={this.state.redactrulesets}\n          agents={this.state.agents}\n          agentInputs={this.state.agentInputs}\n          key={workflow.uuid}\n          handleWFChanges={this.handleWFChanges}\n          deleteWorkflow={this.deleteWorkflow}\n        />)}\n\n      </React.Fragment>\n    );\n  }\n}\n\n\nexport default withStyles(styles)(Workflows);"],"sourceRoot":""}